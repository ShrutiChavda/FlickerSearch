Console App
c# linux macos windows console

Console.ReadKey();

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


factorial=>

int n,fact=1;
input on string str
n=convert.ToInt32(str);
for(int i=1;i<=n;i++)
{
	fact = fact * i;
}
Console.WriteLine("Factorial: {0} is: ",fact);


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
svmain
{
int a,b,c,res;
string str;

input str - num1
a=convert.ToInt(str);

input str - num2
b=convert.ToInt(str);

input str - num1
c=convert.ToInt(str);

res = Sum(a,b,c);
Console.WriteLine("sum is: "+res);
}
static int Sum(int x,int y, int z)
{
	int res;
	res = x+y+z;
	return res;
}


----------------------------------------------------------------------------------------------------------------------
.ToUpper();

--------------------------------------------------------------------------------------------------------------------------

 string a = Console.ReadLine();
 char[] characters = a.ToCharArray();
 for (int i = 0; i < characters.Length; i++)
     if (char.IsUpper(characters[i]))
         characters[i] = char.ToLower(characters[i]);
     else if (char.IsLower(characters[i]))
         characters[i] = char.ToUpper(characters[i]);
 Console.Write(characters);

----------------------------------------------------------------------------------------------------------------------------

int n = 10;
Console.WriteLine("Fibonacci Series:");
int a = 0, b = 1,
Console.Write(a + " " + b + " ");
for (int i = 3; i <= n; i++)
{
c = a + b;
Console.Write(c + " ");
a = b;
b = c;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

ConvertNumberToWords(input);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Armstrong

using System;
namespace ArmstrongNumber
{
class Q15
{
static void Main(string[] args)
{
Console.Write("Enter a number: ");
int number = int.Parse(Console.ReadLine());
bool isArmstrong = IsArmstrongNumber(number);
if (isArmstrong)
{
Console.WriteLine($"{number} is an Armstrong number.");
}
else
{
Console.WriteLine($"{number} is not an Armstrong number.");
}
Console.ReadLine();
}
static bool IsArmstrongNumber(int number)
{
int originalNumber = number;
int sum = 0;
int numberOfDigits = (int)Math.Floor(Math.Log10(number)) + 1;
while (number > 0)
{
int digit = number % 10;
sum += (int)Math.Pow(digit, numb
number /= 10;
}
return sum == originalNumber;
}
}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------


toggle

using System;
namespace ToggleCase
{
class Q9
{
static void Main(string[] args)
{
Console.Write("Enter a name: ");
string inputName = Console.ReadLine();
string toggledName = ToggleCase(inputName);
Console.WriteLine("OUTPUT: " + toggledName);
Console.ReadLine();
}
static string ToggleCase(string input)
{
char[] characters = input.ToCharArray();
for (int i = 0; i < characters.Length; i++)
{
if (char.IsUpper(characters[i]))
{
characters[i] = char.ToLower(characters[i]);
}
else if (char.IsLower(char
{
characters[i] = char.ToUpper(characters[i]);
}
}
return new string(characters);
}
}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a Program which accepts mobile no as a string from the user and
converts the last 5 digits into X.


static void Main(string[] args)
Console.Write("Enter a mobile number: ");
string mobileNumber = Console.ReadLine();
string maskedNumber = MaskLastFiveDigits(mobileNumber);
Console.WriteLine("OUTPUT: " + maskedNumber);
Console.ReadLine();
LastFiveDigits(string number)
if (number.Length < 5)
{
return number;
}
int startIndex = number.Length
string maskedPart = new string('X', 5);
string maskedNumber = number.Substring(0, startIndex) + maskedPart;
return maskedNumber;
}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int n=10;
FIBONACCI:
int a=0;b=1,c;
for(int i=3;i<=n;i++)
{
c=a+b;
PRINT c
a=b;
b=c;

}
console read


----------------------------


armstrong

amespace ArmstrongNumber
{
class Q15
{
static void Main(string[] args)
{
Console.Write("Enter a number: ");
int number = int.Parse(Console.ReadLine());
bool isArmstrong = IsArmstrongNumber(number);
if (isArmstrong)
{
Console.WriteLine($"{number} is an Armstrong number.");
}
else
{
Console.WriteLine($"{number} is not an Armstrong number.");
}
Console.ReadLine();
}
static bool IsArmstrongNumber(int number)
{
int originalNumber = number;
int sum = 0;
int numberOfDigits = (int)Math.Floor(Math.Log10(number)) + 1;
while (number > 0)
{
int digit = number % 10;
sum += (int)Math.Pow(digit, numb
number /= 10;
}
return sum == originalNumber;
}
}
}
Output:
Enterprise Computing ThroughNET Framework (CE525)

Write a Program to check whether the given no is Armstrong no or not.
static void Main(string[] args)
e("Enter a number: ");
int number = int.Parse(Console.ReadLine());
bool isArmstrong = IsArmstrongNumber(number);
Console.WriteLine($"{number} is an Armstrong number.");
Console.WriteLine($"{number} is not an Armstrong number.");
Console.ReadLine();
static bool IsArmstrongNumber(int number)
ginalNumber = number;
int numberOfDigits = (int)Math.Floor(Math.Log10(number)) + 1;
while (number > 0)
int digit = number % 10;
sum += (int)Math.Pow(digit, numberOfDigits);
number /= 10;
return sum == originalNumber;

Write a Program to check whether the given no is Armstrong no or not.
Console.WriteLine($"{number} is an Armstrong number.");
Console.WriteLine($"{number} is not an Armstrong number.");


----------------------------------------------------------------------------------------------------------------


using System;
namespace Pattern
{
class Q16
{
static void Main(string[] args)
{
int rows = 4;
for (int i = 1; i <= rows; i++)
{
for (int j = 1; j <= i; j++)
{



Write a program to display a pattern like a right angle triangle using an
static void Main(string[] args)
for (int i = 1; i <= rows; i++)
for (int j = 1; j <= i; j++)

Write a program to display a pattern like a right angle triangle using an

Console.Write("*");
}
Console.WriteLine();
}
}
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

using System;
namespace DiamondPattern
{
class Q22
{
static void Main(string[] args)
{
int rows = 5;
int spaces = rows
int stars = 1;
for (int i = 1; i <= rows; i++)
{
for (int j = 1; j <= spaces; j++)
{
Console.Write(" ");
}
for (int k = 1; k <= stars; k++)
{
Console.Write("*");
}
Console.WriteLine();
spaces--;
stars += 2;
}
spaces = 1;
stars = rows * 2
for (int i = 1; i <= rows
Enterprise Computing ThroughNET Framework (CE525)

Write a program to display a pattern like a diamond.
static void Main(string[] args)
rows - 1;
for (int i = 1; i <= rows; i++)
for (int j = 1; j <= spaces; j++)
Console.Write(" ");
for (int k = 1; k <= stars; k++)
Console.Write("*");
Console.WriteLine();
stars = rows * 2 - 3;
for (int i = 1; i <= rows - 1; i++)

{
for (int j = 1; j <= spaces; j++)
{
Console.Write(" ");
}
for (int k = 1;
{
Console.Write("*");
}
Console.WriteLine();
spaces++;
stars -= 2;
}
}
}








Tutorial 2

1 : Predict and write output for the following code.
using System;
namespace DecisionMaking
{
    class Program
    {
        static void Main(string[] args)
        {
            /* local variable definition */
            int a = 10;
 
            /* check the boolean condition using if statement */
            if (a < 20)
            {
                /* if condition is true then print the following */
                Console.WriteLine("a is less than 20");
            }
            Console.WriteLine("value of a is : {0}", a);
            Console.ReadLine();
        }
    }
}

Output:


 
2 : Write missing statement to get the desired output.
using System;
namespace DecisionMaking
{
   
    class Program
    {
        static void Main(string[] args)
        {
 
            /* local variable definition */
            int a = 100;
 
            /* check the boolean condition */
            if (a < 20)
            {
                /* if condition is true then print the following */
                Console.WriteLine("a is less than 20");
            }
            else
            {
                /* if condition is false then print the following */
                   //………………………………Missing statement-1……………………………….//
             }
               //………………………………Missing statement-2……………………………….//                
              Console.ReadLine();
        }
    }
}
Output
a is not less than 20
value of a is : 100

 Code:
using System;
namespace DecisionMaking
{

    class Program
    {
        static void Main(string[] args)
        {

            /* local variable definition */
            int a = 100;

            /* check the boolean condition */
            if (a < 20)
            {
                /* if condition is true then print the following */
                Console.WriteLine("a is less than 20");
            }
            else
            {
                Console.WriteLine("a is not less than 20");
            }
            Console.WriteLine("value of a is : "+a);
            Console.ReadLine();
        }
    }
}

Output:

 

3 : Correct the following code and write output for the corrected code.
using System;
namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            char firstName = "John";
            char lastName = "Doe";
            Console.WriteLine("Name: " + firstName + " " + lastName);
 
            Console.WriteLine("Please enter a new first name:")
            firstName = Console.ReadLine();
 
            Console.WriteLine("New name: "  firstName  " "  lastName);
 
            Console.ReadLine();
        }
    }
}

 Code:
using System;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            string firstName = "John"; // Changed 'char' to 'string'
            string lastName = "Doe";   // Changed 'char' to 'string'
            Console.WriteLine("Name: " + firstName + " " + lastName);

            Console.WriteLine("Please enter a new first name:"); // Added semicolon
            firstName = Console.ReadLine();

            Console.WriteLine("New name: " + firstName + " " + lastName); // Added '+' for concatenation
            Console.ReadLine();
        }
    }
}

Output:

 

4 : Input two number A and B. perform different operations using different operators and different data types available in C#. (Note : Follow all the operators and data types to do above task. Use Online help whenever necessary.)
 
Code:
using System;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter the first number:");
            int a = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter the second number:");
            int b = int.Parse(Console.ReadLine());

            int sum = a + b;
            Console.WriteLine("Addition is: " + sum);
            int difference = a - b;
            Console.WriteLine("Subtraction is: " + difference);

            int product = a * b;
            Console.WriteLine("Multiplication is: " + product);

            float division = a / b;
            Console.WriteLine("Division is: " + division);

            int modulus = a % b;
            Console.WriteLine("Modulus is: " + modulus);

            int bitwiseAnd = a & b;
            Console.WriteLine("Bitwise AND is: " + bitwiseAnd);

            int bitwiseOr = a | b;
            Console.WriteLine("Bitwise OR is: " + bitwiseOr);

            int bitwiseXor = a ^ b;
            Console.WriteLine("Bitwise XOR is: " + bitwiseXor);

            int bitwiseNot = ~a;
            Console.WriteLine("Bitwise NOT of a is: " + bitwiseNot);

            bool logicalAnd = (a > 0) && (b > 0);
            Console.WriteLine("Logical AND: " + logicalAnd);

            bool logicalOr = (a > 0) || (b > 0);
            Console.WriteLine("Logical OR: " + logicalOr);

            bool logicalNot = !(a > b);
            Console.WriteLine("Logical NOT: " + logicalNot);

            int leftShift = a << 1;
            Console.WriteLine("Left Shift: " + leftShift);

            int rightShift = b >> 1;
            Console.WriteLine("Right Shift: " + rightShift);

            int unaryPlus = +a;
            Console.WriteLine("Unary Plus: " + unaryPlus);

            int unaryMinus = -a;
            Console.WriteLine("Unary Minus: " + unaryMinus);

            Console.ReadLine();
        }
    }
}

Output:
 

5 : Rearrange the given code to correct the program. The resultant program will be to enter 5 elements into an array and print sum of these elements.
 
using System;
namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
 
            for (int i = 0; i < 5; i++)
            {
               
                string str = Console.ReadLine();
    
            }
            for (int i = 0; i < 5; i++)
            {
                sum = sum + arr[i];
            }
            Console.WriteLine("Sum of Elements : {0}",sum);
            int[] arr = new int[5];
            int sum = 0;
           arr[i] = Convert.ToInt32(str);
           Console.Write("Enter Element {0}: ", i);
            Console.Read();
        }
       
    }
}
 
Output:
Enter Element 0: 1
Enter Element 1: 2
Enter Element 2: 3
Enter Element 3: 4
Enter Element 4: 5
Sum of Elements : 15
 
Code:
using System;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] arr = new int[5]; 
            int sum = 0;            

            for (int i = 0; i < 5; i++)
            {
                Console.Write("Enter Element {0}: ", i); 
                string str = Console.ReadLine();          
                arr[i] = Convert.ToInt32(str);        
            }

            for (int i = 0; i < 5; i++)
            {
                sum += arr[i]; 
            }

            Console.WriteLine("Sum of Elements: {0}", sum); 
            Console.Read();
        }
    }
}

Output:
 

6: Write missing statement to get the desired output.
using System;
public class Hello3
{
   public static void Main(string[] args)
   {
      Console.WriteLine("Hello, World!");
      Console.WriteLine("You entered the following {0} command line arguments:",
         args.Length );
          //………………………………Missing statement-1……………………………….//      
          //………………………………Missing statement-2……………………………….//       
          //………………………………Missing statement-3……………………………….//       
          //………………………………Missing statement-4……………………………….//       
   }
}
 
Output:
-------------------
Hello, World!
You entered the following 4 command line arguments:
A
B
C
D
 
Code:
using System;

public class Hello3
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
        Console.WriteLine("You entered the following {0} command line arguments:", args.Length);

        for (int i = 0; i < args.Length; i++)
        {
            Console.WriteLine(args[i]);
        }
    }
}

Output:
 

7 : Predict and write the output of the given code.
using System;
namespace CalculatorApplication
{
   class NumberManipulator
   {
      public void swap(ref int x, ref int y)
      {
         int temp;
         temp = x; /* save the value of x */
         x = y;   /* put y into x */
         y = temp; /* put temp into y */
       }
   }
  class TestRef
   {
      static void Main(string[] args)
      {
         NumberManipulator n = new NumberManipulator();
         /* local variable definition */
         int a = 100;
         int b = 200;
 
         Console.WriteLine("Before swap, value of a : {0}", a);
         Console.WriteLine("Before swap, value of b : {0}", b);
 
         /* calling a function to swap the values */
         n.swap(ref a, ref b);
 
         Console.WriteLine("After swap, value of a : {0}", a);
         Console.WriteLine("After swap, value of b : {0}", b);
 
         Console.ReadLine();
      }
   }
}
 
Output:

 

8 : Find out error code and correct it. Write the output of the corrected code.
using System;
namespace CalculatorApplication
{
   class NumberManipulator
   {
      public int getValues(out int x, out int y, out int z )
      {
          Console.WriteLine("Enter the first value: ");
          x = Convert.ToInt32(Console.ReadLine());
          Console.WriteLine("Enter the second value: ");
          y = Convert.ToInt32(Console.ReadLine());
          sum = “x” + “y” + “z”;
          return “sum”;
      }
   }
 class TestOut
 {
      static void Main(string[] args)
      {
         NumberManipulator n = new NumberManipulator();
         /* local variable definition */
         int a , b, c, sum;
        
         /* calling a function to get the values */
         sum = n.getValues(out a, out b, out c);
 
         Console.WriteLine("After method call, value of a : {0}", a);
         Console.WriteLine("After method call, value of b : {0}", b);
         Console.WriteLine("After method call, value of c : {0}", c);
         Console.WriteLine("Sum : {0}", );
 
      }
   }
}

Code:
using System;

namespace CalculatorApplication
{
    class NumberManipulator
    {
        public int getValues(out int x, out int y, out int z)
        {
            Console.WriteLine("Enter the first value: ");
            x = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter the second value: ");
            y = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter the third value: ");
            z = Convert.ToInt32(Console.ReadLine());

            int sum = x + y + z;
            return sum;         
        }
    }

    class TestOut
    {
        static void Main(string[] args)
        {
            NumberManipulator n = new NumberManipulator();

            int a, b, c, sum;
            sum = n.getValues(out a, out b, out c);

            Console.WriteLine("After method call, value of a : {0}", a);
            Console.WriteLine("After method call, value of b : {0}", b);
            Console.WriteLine("After method call, value of c : {0}", c);
            Console.WriteLine("Sum : {0}", sum);  
        }
    }
}

Output:

 
9 : Given an array A containing 2*N+2 positive numbers, out of which 2*N numbers exist in pairs whereas the other two number occur exactly once and are distinct. Find the other two numbers.
Example 1:Input: 
 
N = 2
arr[] = {1, 2, 3, 2, 1, 4}
Output:
3 4 
Explanation:
3 and 4 occur exactly once.
 
Example 2:
Input:
N = 1
arr[] = {2, 1, 3, 2}
Output:
1 3
Explanation:
1 3 occur exactly once.

Code:
using System;

class FindDistinctNumbers
{
    public static void FindTwoDistinctNumbers(int[] arr, int N)
    {
        int xor = 0;
        for (int i = 0; i < 2 * N + 2; i++)
        {
            xor ^= arr[i];
        }
        int setBit = xor & -xor;

        int num1 = 0, num2 = 0;
        for (int i = 0; i < 2 * N + 2; i++)
        {
            if ((arr[i] & setBit) != 0)
            {
                num1 ^= arr[i];
            }
            else
            {
                num2 ^= arr[i];
            }
        }
        Console.WriteLine("{0} {1}", num1, num2);
    }

    static void Main(string[] args)
    {
        int[] arr1 = { 1, 2, 3, 2, 1, 4 };
        int N1 = 2;
        Console.WriteLine("Output for Example 1:");
        FindTwoDistinctNumbers(arr1, N1);

        int[] arr2 = { 2, 1, 3, 2 };
        int N2 = 1;
        Console.WriteLine("Output for Example 2:");
        FindTwoDistinctNumbers(arr2, N2);
    }
}

Output:

 

10: Given a matrix mat[][] of size N x M, where every row and column is sorted in increasing order, and a number X is given. The task is to find whether element X is present in the matrix or not.
 
Example 1:
Input:
N = 3, M = 3
mat[][] = 3 30 38 
         44 52 54 
         57 60 69
X = 62
Output:
0
Explanation:
62 is not present in the
matrix, so output is 0
 
Example 2:
Input:
N = 1, M = 6
mat[][] = 18 21 27 38 55 67
X = 55
Output:
1
Explanation:
55 is present in the
matrix at 5th cell.
 
Your Task:
You don't need to read input or print anything. You just have to complete the function matSearch() which takes a 2D matrix mat[][], its dimensions N and M and integer X as inputs and returns 1 if the element X is present in the matrix and 0 otherwise.
 
Expected Time Complexity: O(N+M).
Expected Auxiliary Space: O(1).
 
Constraints:
1 <= N, M <= 1005
1 <= mat[][] <= 10000000
1<= X <= 10000000
 
Code:
using System;

class Program
{
    static void Main(string[] args)
    {
        Solution sol = new Solution();

        int[,] mat1 = { { 3, 30, 38 },
                        { 44, 52, 54 },
                        { 57, 60, 69 } };
        int N1 = 3, M1 = 3, X1 = 62;
        int result1 = sol.matSearch(mat1, N1, M1, X1);
        Console.WriteLine(result1);  // Output: 0

        int[,] mat2 = { { 18, 21, 27, 38, 55, 67 } };
        int N2 = 1, M2 = 6, X2 = 55;
        int result2 = sol.matSearch(mat2, N2, M2, X2);
        Console.WriteLine(result2);  // Output: 1
    }
}

class Solution
{
    public int matSearch(int[,] mat, int N, int M, int X)
    {
        int i = 0, j = M - 1;

        while (i < N && j >= 0)
        {
            if (mat[i, j] == X)
            {
                return 1;
            }
            else if (mat[i, j] > X)
            {
                j--;
            }
            else
            {
                i++;
            }
        }

        return 0;
    }
}


Output:

 

11: Write a program to find the sum of N elements of an Array.
Code:
using System;

class Program
{
    static void Main(string[] args)
    {
        Console.Write("Enter the number of elements: ");
        int N = Convert.ToInt32(Console.ReadLine());

        int[] arr = new int[N];
        int sum = 0;

        for (int i = 0; i < N; i++)
        {
            Console.Write("Enter element {0}: ", i + 1);
            arr[i] = Convert.ToInt32(Console.ReadLine());
            sum += arr[i];
        }

        Console.WriteLine("Sum of elements: " + sum);
    }
}

Output:
 
12: Write a program to find the element from an Array and print 1 if element is found else print 0.
Code:
using System;

class Program
{
    static void Main()
    {
        int[] array = { 1, 2, 3, 4, 5 };
        int target = 3;

        if (FindElement(array, target))
            Console.WriteLine(1);
        else
            Console.WriteLine(0);
    }

    static bool FindElement(int[] arr, int target)
    {
        foreach (int element in arr)
        {
            if (element == target)
                return true;
        }
        return false;
    }
}
Output:
 
13. Write a Program that will accept the amount and find how many minimum
no of notes you required for that.
(Using the rupee notes of 1, 2, 5, 10, 20, 50, 100, 200, 500, 2000)
Input: 5748
Output:
Notes of Rs.2000 = 2 Notes of Rs.500 = 3 Notes of Rs.200 = 1
Notes of Rs.20 = 2 Notes of Rs.10 = 0 Notes of Rs.5 = 1
Notes of Rs.2 = 1 Notes of Rs.1 = 1

Code:
using System;

class Program
{
    static void Main(string[] args)
    {
        int[] notes = { 2000, 500, 200, 20, 10, 5, 2, 1 };
        Console.Write("Enter the amount: ");
        int amount = Convert.ToInt32(Console.ReadLine());

        foreach (int note in notes)
        {
            int count = amount / note;
            if (count > 0)
            {
                Console.WriteLine("Notes of Rs.{0} = {1}", note, count);
                amount %= note;
            }
        }
    }
}

Output:
 

14. Write a Program to find the eligibility of admission for a  professional course
based on the following criteria:
Marks in Maths >=65
Marks in Phy >=55
Marks in Chem>=50 and
Total in all three subject >=180 or
Total in Math and Physics >=140
INPUT:
Input the marks obtained in Maths :72
Input the marks obtained in Physics :65
Input the marks obtained in Chemistry :51
OUTPUT:
The candidate is eligible for admission.

Code:
using System;

class Program
{
    static void Main(string[] args)
    {
        Console.Write("Input the marks obtained in Maths: ");
        int maths = Convert.ToInt32(Console.ReadLine());

        Console.Write("Input the marks obtained in Physics: ");
        int physics = Convert.ToInt32(Console.ReadLine());

        Console.Write("Input the marks obtained in Chemistry: ");
        int chemistry = Convert.ToInt32(Console.ReadLine());

        bool isEligible = (maths >= 65 && physics >= 55 && chemistry >= 50 &&
                           (maths + physics + chemistry >= 180 ||
                            maths + physics >= 140));

        if (isEligible)
        {
            Console.WriteLine("The candidate is eligible for admission.");
        }
        else
        {
            Console.WriteLine("The candidate is not eligible for admission.");
        }
    }
}

Output:
 
15.Write a Program which accepts name from the user and prints the same
INPUT : R K University
OUTPUT: R K University
Code:
using System;

class Program
{
    static void Main(string[] args)
    {
        Console.Write("Enter your name: ");
        string name = Console.ReadLine();
        Console.WriteLine(name);
    }
}

Output:
 










Lab Tutorial – 3
1. Draw a real picture for class and object. Differentiate class and object in terms
of diagram only.
Perform following tasks.
Task 1: Create a class
Task 2: Add few data members as private
Task 3: Add few methods as public to work on defined data members
Task 4: Create a Demo class with main method.
Task 5: Create at least two objects of a class defined in Task 1 into main method and
call all methods using that object.
Task 6: Write comment for each important portion of code like data members’
declaration, methods, some important logic etc.
Task 7: Summarize above solution in your own few words to visualize the solution to the
end user.
Code :
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Tutorial_3
{
public class MyClass
{
private int myPrivateInt;
private string myPrivateString;
public void SetInt(int value)
{
myPrivateInt = value;
}
public int GetInt()
{

return myPrivateInt;
}
public void SetString(string value)
{
myPrivateString = value;
}
public string GetString()
{
return myPrivateString;
}
}
public class Program
{
static void Main(string[] args)
{
MyClass obj1 = new MyClass();
MyClass obj2 = new MyClass();
obj1.SetInt(42);
obj1.SetString("Hello, World!");
obj2.SetInt(123);
obj2.SetString("Object 2");
Console.WriteLine("....");
Console.WriteLine("Enroll no :- Enrollment");
Console.WriteLine("Object 1: " + obj1.GetInt() + ", " + obj1.GetString());
Console.WriteLine("Object 2: " + obj2.GetInt() + ", " + obj2.GetString());
}
}
}
Output:

2. Define a class Clock with three private integer data members hour, min and sec.
Define a no argument constructor to initialize time value to 12:00:00. Define a
three argument constructor to initialize the time.
Define a methods to
1. Increment time to next second.
2. Display the time value.
3. Return the hour (int getHour())
4. Return the minute (int getMinute())
5. Return the seconds (int getSeconds())
Code :
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Tutorial_3
{
public class Clock
{
private int hour;
private int min;
private int sec;
public Clock()
{

hour = 12;
min = 0;
sec = 0;
}
public Clock(int hour, int min, int sec)
{
this.hour = hour;
this.min = min;
this.sec = sec;
}
public void IncrementTime()
{
sec++;
if (sec == 60)
{
sec = 0;
min++;
if (min == 60)
{
min = 0;
hour = (hour + 1) % 24;

}
}
}
public void DisplayTime()
{
Console.WriteLine($"{hour:D2}:{min:D2}:{sec:D2}");
}
public int GetHour()
{
return hour;
}
public int GetMinute()
{
return min;
}
public int GetSeconds()
{
return sec;
}
}
public class Que_2
{
static void Main(string[] args)

{
Console.WriteLine(" ");
Console.WriteLine("Enroll no :- Enrollment");
Clock clock1 = new Clock();
Console.WriteLine("Clock 1:");
clock1.DisplayTime();
Clock clock2 = new Clock(5, 30, 45);
Console.WriteLine("Clock 2:");
clock2.DisplayTime();
clock2.IncrementTime();
Console.WriteLine("Clock 2 (After incrementing):");
clock2.DisplayTime();
Console.WriteLine("Clock 2 Details:");
Console.WriteLine("Hour: " + clock2.GetHour());
Console.WriteLine("Minute: " + clock2.GetMinute());
Console.WriteLine("Seconds: " + clock2.GetSeconds());
}
}
}

   
Output:
3. Define a Student class with appropriate data members, property, constructors,
methos etc. Define another class called TestStudent within the samecs file. Also
create an object of student class and demonstrate the use of student class.
Code :
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Tutorial_3
{
public class Student
{
// Data members (private)
private string name;
private int age;
private string rollNumber;
// Properties to access the private data members (public)
public string Name
{
get { return name; }
set { name = value; }
}
public int Age
{
get { return age; }

 
set { age = value; }
}
public string RollNumber
{
get { return rollNumber; }
set { rollNumber = value; }
}
// Constructors
public Student()
{
// Default constructor
}
public Student(string name, int age, string rollNumber)
{
// Parameterized constructor
this.name = name;
this.age = age;
this.rollNumber = rollNumber;
}
// Method to display student information
public void DisplayInfo()
{
Console.WriteLine(" ");
Console.WriteLine("Enroll no :- Enrollment");
Console.WriteLine("Name: " + name);
Console.WriteLine("Age: " + age);
Console.WriteLine("Roll Number: " + rollNumber);
}
}
public class Que_3
{
static void Main(string[] args)
{
// Creating an object of Student class
Student student1 = new Student();
// Using properties to set student information
student1.Name = "John Stae";
student1.Age = 20;
student1.RollNumber = "25";
// Displaying student information using the method
Console.WriteLine("Student 1 Information:");

 
student1.DisplayInfo();
}
}
}
Output :
4. Use above program classes and create objects for 5 students and demonstrate
the use student class.
Code :
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Tutorial_3
{
class Student1
{
private string _studentName; // Changed variable name to avoid conflict
private int _rollNumber;
private double _marks;
// Task 3: Define public methods to set and get values of the data members
// Method to set student details
public void SetStudentDetails(string studentName, int studentRoll, double studentMarks)
{
_studentName = studentName; // Updated to _studentName to avoid ambiguity
_rollNumber = studentRoll;
_marks = studentMarks;
}
// Method to display student details
public void DisplayStudentDetails()
{
Console.WriteLine("Student Name: " + _studentName);

 
Console.WriteLine("Roll Number: " + _rollNumber);
Console.WriteLine("Marks: " + _marks);
Console.WriteLine("------------------------------");
}
// Method to check if the student has passed (assuming pass marks = 40)
public void CheckPassStatus()
{
if (_marks >= 40)
{
Console.WriteLine(_studentName + " has passed.");
}
else
{
Console.WriteLine(_studentName + " has failed.");
}
Console.WriteLine("------------------------------");
}
}
public class Que_4
{
static void Main(string[] args)
{
// Task 5: Create objects for 5 students
Student1 student1 = new Student1();
Student1 student2 = new Student1();
Student1 student3 = new Student1();
Student1 student4 = new Student1();
Student1 student5 = new Student1();
// Task 6: Set student details and display for each object
student1.SetStudentDetails("Alice", 1, 85.5);
student2.SetStudentDetails("Bob", 2, 72.3);
student3.SetStudentDetails("Charlie", 3, 59.0);
student4.SetStudentDetails("David", 4, 38.4);
student5.SetStudentDetails("Eve", 5, 94.7);
// Display details and pass status for each student
Console.WriteLine(" ");
Console.WriteLine("Enroll : Enrollment");
student1.DisplayStudentDetails();
student1.CheckPassStatus();
student2.DisplayStudentDetails();
student2.CheckPassStatus();
student3.DisplayStudentDetails();

 
student3.CheckPassStatus();
student4.DisplayStudentDetails();
student4.CheckPassStatus();
student5.DisplayStudentDetails();
student5.CheckPassStatus();
Console.ReadLine();
}
}
}
Output :

 
5. Rearrange the given code to get the desired output.
using System;
namespace ConsoleApplication
{
class Product
{
public Product(int pcd, String pnm, String mnm)
{
mname = mnm;
}
public void Display()
{
Console.WriteLine("\nManufacturer Name:= " + mname);
}
}
int pcode;
String pname, mname;
Console.WriteLine("\nProduct Code:= " + pcode);
Console.WriteLine("\nProduct Name:= " + pname);
pcode = pcd;
pname = pnm;
public class TestProduct
{
public static void Main(string[] args)

 
{
int n = args.Length;
if (n < 3)
{
Console.WriteLine("Syntax Error\n");
Console.WriteLine("Must Have THREE Arguments\n");
Console.WriteLine("Please, Write as [csc TestProduct ProductCode
ProductName Manufacturer] \n");
}
else
{
Product p=new Product(pcd,pnm,mnm);
p.Display();
Console.Read();
int pcd = Convert.ToInt32(args[0]);
String pnm = args[1];
String mnm = args[2];
}
}
}
}
Output:
Product Code:= P001
Product Name:= Mouse
Manufacturer Name:= Logitech

 
Code :
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Tutorial_3
{
class Product
{
private int pcode;
private string pname;
private string mname;
public Product(int pcd, string pnm, string mnm)
{
pcode = pcd;
pname = pnm;
mname = mnm;
}
public void Display()
{
Console.WriteLine("\nProduct Code:= " + pcode);
Console.WriteLine("\nProduct Name:= " + pname);
Console.WriteLine("\nManufacturer Name:= " + mname);
}

 
}
class Que_6
{
static void Main(string[] args)
{
int n = args.Length;
if (n < 3)
{
Console.WriteLine(" ");
Console.WriteLine("Enrollment");
Console.WriteLine("Syntax Error\n");
Console.WriteLine("Must Have THREE Arguments\n");
Console.WriteLine("Please, Write as [csc TestProduct ProductCode ProductName
Manufacturer] \n");
}
else
{
int pcd = Convert.ToInt32(args[0]);
string pnm = args[1];
string mnm = args[2];
Product p = new Product(pcd, pnm, mnm);
p.Display();
Console.Read();
}
}
}

 
}
Output :
6. Complete the following code that will generate the given output:
Solution:
using System;
namespace LineApplication
{
class Line
{
private double length; // Length of a line
public Line()
{
//………………………………Missing statement-1……………………………….//
//………………………………Missing statement-2……………………………….//
}
public void setLength( double len )
{
//………………………………Missing statement-3……………………………….//

 
}
public double getLength()
{
//………………………………Missing statement-4……………………………….//
}
}
class TestLine
{
static void Main(string[] args)
{
Line line = new Line();
// set line length
Console.WriteLine("Length of line : {0}", line.getLength());
// set line length
Console.WriteLine("Length of line : {0}", line.getLength());
Console.ReadKey();
}
}
}
Output:
Object is being created, length = 10
Length of line : 10
Length of line : 6
Code :

 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Tutorial_3
{
class Line
{
private double length;
public Line()
{
Console.WriteLine(" ");
Console.WriteLine("Enrollment");
length = 10;
Console.WriteLine("Object is being created, length = " + length);
}
public void setLength(double len)
{
length = len;
}
public double getLength()
{
return length;
}

 
}
class Que_5
{
static void Main(string[] args)
{
Line line = new Line();
line.setLength(10.0);
Console.WriteLine("Length of line: {0}", line.getLength());
line.setLength(6.0);
Console.WriteLine("Length of line: {0}", line.getLength());
Console.ReadKey();
}
}
}
Output :
7. Define EnrolmentNo and Name properties for the Student class and
demonstrate use of these properties along with required data members, methods
and constructors.
Code :
using System;

 
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Tutorial_3
{
public class Student2
{
// Private data members
private string enrolmentNo;
private string name;
private int age;
// Public properties
public string EnrolmentNo
{
get { return enrolmentNo; }
set { enrolmentNo = value; }
}
public string Name
{
get { return name; }
set { name = value; }
}

 
// Constructors
public Student2()
{
// Default constructor
}
public Student2(string enrolmentNo, string name, int age)
{
this.enrolmentNo = enrolmentNo;
this.name = name;
this.age = age;
}
// Method to display student information
public void DisplayStudentInfo()
{
Console.WriteLine("Enrolment No: " + enrolmentNo);
Console.WriteLine("Name: " + name);
Console.WriteLine("Age: " + age);
}
}
class Que_7
{
static void Main()
{
// Creating an object of Student class using default constructor

 
Student2 student1 = new Student2();
student1.EnrolmentNo = "Enrollment";
student1.Name = " ";
student1.DisplayStudentInfo();
// Creating an object of Student class using parameterized constructor
Student2 student2 = new Student2("Enrollment", " ", 22);
student2.DisplayStudentInfo();
}
}
}
Output :







Tutorial – 04
1 : The employee list for a company contains employee code, name, designation and basic pay. The employee is given a house rent allowance (HRA) of 10% of the basic pay and dearness allowance (DA) of 45% of the basic pay. The total pay of the employee is calculated as Basic Pay + HRA + DA. Write a class to define the details of the employee. Write a constructor to assign the required initial values. Add a method to calculate HRA, DA and total pay and print them. Write another class with main method. Create objects for three different employees and calculate HRA, DA and total pay.
Solution: 
using System; 
class Employee 
{ 
public string EmployeeCode { get; set; } public string Name { get; set; } public string Designation { get; set; } public decimal BasicPay { get; set; } 
public Employee(string employeeCode, string name, string designation, decimal basicPay) 
{ 
EmployeeCode = employeeCode; 
Name = name; 
Designation = designation; 
BasicPay = basicPay; 
} 
public void CalculateAndPrintPay() 
{ 
decimal hra = 0.10m * BasicPay; // HRA = 10% of Basic Pay 
decimal da = 0.45m * BasicPay; // DA = 45% of Basic Pay decimal totalPay = BasicPay + hra + da; // Total Pay 
Console.WriteLine($"Employee Code: {EmployeeCode}"); 
Console.WriteLine($"Name: {Name}"); 
Console.WriteLine($"Designation: {Designation}"); 
Console.WriteLine($"Basic Pay: {BasicPay:C}"); 
Console.WriteLine($"HRA (10%): {hra:C}"); 
Console.WriteLine($"DA (45%): {da:C}"); 
Console.WriteLine($"Total Pay: {totalPay:C}"); 
Console.WriteLine(); 
} 
} 
class EmployeeTest 
{ 
static void Main() 
{ 
// Creating objects for three different employees 
Employee emp1 = new Employee("E001", "Rk", "Software Engineer", 50000); 
Employee emp2 = new Employee("E002", "Jk", "Project Manager", 70000); Employee emp3 = new Employee("E003", "Nt", "HR Specialist", 60000); 
// Calculating and printing HRA, DA, and total pay for each employee emp1.CalculateAndPrintPay(); emp2.CalculateAndPrintPay(); emp3.CalculateAndPrintPay(); 
} 
} 
Output:
 
2 : From the following code and given output, complete missing statements and find out error code and correct it.
Solution: 
using System; 
// Base class or Parent class class Shape 
{ 
public double Width; public double Height; 
public void ShowDim() 
{ 
Console.WriteLine("Width and height are " + Width + " and " + Height); 
} 
} 
class Triangle : Shape 
{ 
public string Style; 
public double Area() 
{ 
return Width * Height / 2; 
} 
public void ShowStyle() 
{ 
Console.WriteLine("Triangle is " + Style); 
} 
} 
class Driver 
{ 
static void Main() 
{ 
Triangle t1 = new Triangle(); Triangle t2 = new Triangle(); 
t1.Width = 4.0; 
t1.Height = 4.0; t1.Style = "isosceles"; 
t2.Width = 8.0; t2.Height = 12.0; t2.Style = "right"; 
Console.WriteLine("Info for t1: "); t1.ShowStyle(); t1.ShowDim(); 
Console.WriteLine("Area is " + t1.Area()); 
Console.WriteLine(); 
Console.WriteLine("Info for t2: "); t2.ShowStyle(); t2.ShowDim(); Console.WriteLine("Area is " + t2.Area()); 
} 
} 
Output:
 
4 : From the following code and given output complete missing statements and find out error code and correct it.
Solution: 
using System; 
namespace StaticVarApplication 
{ 
class StaticVar 
{ 
// Static variable public static int num; 
// Method to increment the static variable public void count() 
{ 
num++; 
} 
// Static method to get the value of the static variable public static int getNum() 
{ 
return num; 
} 
} 
class StaticTester 
{ 
static void Main(string[] args) 
{ 
StaticVar s = new StaticVar(); 
s.count(); // Increment num by 1 
s.count(); // Increment num by 1 
s.count(); // Increment num by 1 
Console.WriteLine("Variable num: {0}", StaticVar.getNum()); // Print the value of num 
// Console.ReadKey(); 
} 
} 
} 
Output:
 

5 : Find out error code and correct it. Print appropriate output as desired.
Solution:
using System; public class A 
{ 
public A(int value) 
{ 
Console.WriteLine("Base constructor A()"); 
} 
} 
public class B : A 
{ 
public B(int value) : base(value) 
{ 
Console.WriteLine("Derived constructor B()"); 
} 
} 
class Program 
{ 
static void Main() 
{ 
A	a = new A(0); 
B	b = new B(1); 
} 
} 
Output:
 

6 : Find out error code and correct it. Print appropriate output as desired.
Solution:
using System; 
abstract class Test 
{ 
protected int a; 
public abstract void A(); 
} 
class Example1 : Test 
{ 
public override void A() 
{ 
Console.WriteLine("Example1.A"); a++; 
} 
} 
class Example2 : Test 
{ 
public override void A() 
{ 
Console.WriteLine("Example2.A"); a--; 
} 
} 
class Program 
{ 
static void Main() 
{ 
Test test1 = new Example1(); test1.A(); 
Test test2 = new Example2(); test2.A(); } 
} 
Output:
 
7 : Refer given output and find out error code and correct it.
Solution: 
using System; 
sealed class A 
{ public int x; 
public int y; 
} 
class SealedTest2 
{ 
static void Main() 
{ 
A sc = new A(); sc.x = 110; sc.y = 150; 
Console.WriteLine("x = {0}, y = {1}", sc.x, sc.y); 
} 
} 
Output:
 
8 : Find out error code and correct it. Print appropriate output as desired.
Solution:
using System; 
class X 
{ 
public void F() 
{ 
Console.WriteLine("X.F"); 
} 
public void F2() 
{ 
Console.WriteLine("X.F2"); 
} 
} 
class Y : X 
{ 
	public void F() 
{ 
Console.WriteLine("Y.F"); 
} 
public void F2() 
{ 
Console.WriteLine("Y.F2"); 
} 
} 
class Z : Y 
{ 
// Attempting to override F will result in an error due to the sealed modifier in Y 
// protected override void F() { Console.WriteLine("Z.F"); } // This line will cause a compilation error 
// Overriding F2 public void F2() 
{ 
Console.WriteLine("Z.F2"); 
} 
} 
class SealedMethodTest 
{ 
static void Main() 
{ 
X	Obj1 = new X(); 
Obj1.F(); // Calls X.F 
Obj1.F2(); // Calls X.F2 
Y	Obj2 = new Y(); 
Obj2.F(); // Calls Y.F 
Obj2.F2(); // Calls Y.F2 
Z	Obj3 = new Z(); 
Obj3.F(); // Calls Y.F because F is sealed in Y and cannot be overridden in Z Obj3.F2(); // Calls Z.F2 because F2 is overridden in Z 
} 
} 
Output:
 
9 : This program will throw an exception. Add try, catch and finally blocks to handle this exception.
Solution: 
using System; 
class MyClient 
{ 
public static void Main() 
{ try 
{ int x = 0; int div = 100 / x; 
Console.WriteLine(div); 
} 
catch (DivideByZeroException ex) 
{ 
Console.WriteLine("Exception caught: Division by zero is not allowed."); Console.WriteLine("Error: " + ex.Message); 
} finally 
{ 
Console.WriteLine("Execution continues..."); 
} 
} 
} 
Output:
 
10: Arrange the code to get desirable Solution:
using System;
class MyException : Exception 
{ 
public MyException(string str): base(str) 
{ 
Console.WriteLine("user udefind exception"); 
} 
} 
class MyClient 
{ 
public static void Main() 
{ try 
{ 
throw new MyException("my exception generated."); 
} 
catch (Exception e) 
{ 
Console.WriteLine("Exception caught here: " + e.ToString()); 
} 
Console.WriteLine("LAST STATEMENT"); 
} 
} 
Output:
 
11. Design a simple system for a library. Create a base class Item with properties like Title and Author. Then, create derived classes Book, Magazine, and DVD that inherit from Item. Add specific properties and methods to each derived class.
Solution:
public class Item 
{ public string Title { get; set; } public string Author { get; 
set; } public int Year { get; set; } public string ItemID { get; set; } public Item(string title, string author, int year, string itemId) { 
Title = title; 
Author = author; 
Year = year; 
ItemID = itemId; 
} 
public virtual void DisplayInfo() 
{ 
Console.WriteLine($"Title: {Title}, Author: {Author}, Year: {Year}, ItemID: {ItemID}"); 
} 
public class Book : Item 
{ 
public string Genre { get; set; } 
public int PageCount { get; set; } 
public Book(string title, string author, int year, string itemId, string genre, int pageCount) : base(title, author, year, itemId) 
{ 
Genre = genre; 
PageCount = pageCount; 
} 
public override void DisplayInfo() 
{ 
base.DisplayInfo(); 
Console.WriteLine($"Genre: {Genre}, Page Count: {PageCount}"); 
} 
} 
public class Magazine : Item 
{ 
public int IssueNumber { get; set; } 
public string Month { get; set; } 
public Magazine(string title, string author, int year, string itemId, int issueNumber, string 
month) 
: base(title, author, year, itemId) 
{ 
IssueNumber = issueNumber; 
Month = month; 
} 
public override void DisplayInfo() 
{ 
base.DisplayInfo(); 
Console.WriteLine($"Issue Number: {IssueNumber}, Month: {Month}"); 
} 
} 
public class DVD : Item 
{ 
public int Duration { get; set; } 
public string Director { get; set; } 
public DVD(string title, string author, int year, string itemId, int duration, string director) : base(title, author, year, itemId) 
{ 
Duration = duration; 
Director = director; 
} 
public override void DisplayInfo() 
{ 
base.DisplayInfo(); 
Console.WriteLine($"Duration: {Duration} minutes, Director: {Director}"); 
} 
} 
class Program 
{ 
static void Main(string[] args) 
{ 
Book book = new Book("1984", "George Orwell", 1949, "B002", "Dystopian", 328); 
Magazine magazine = new Magazine("Time", "Various", 2024, "M002", 5, "July"); 
DVD dvd = new DVD("The Matrix", "The Wachowskis", 1999, "D002", 136, "The Wachowskis"); 
book.DisplayInfo(); Console.WriteLine(); magazine.DisplayInfo(); 
Console.WriteLine(); dvd.DisplayInfo(); 
} 
} 
} 
output:


 




Enrollment Enterprise Computing ThroughNET Framework
  RAJESHBHAI
1 : Design a Form like below. When user Click on OK Button it will print “Welcome to
First Windows Application” on Label. When User Click on Cancel button form get closed.
Code:
namespace Tutorial5
{
public partial class Form1 : Form
{
public Form1()
{
InitializeComponent();
}
private void button1_Click(object sender, EventArgs e)
{
label2.Text = "Welcome to First Windows Application";
}
private void button2_Click(object sender, EventArgs e)
{
this.Close();
}
}
}
Output:
Enterprise Computing ThroughNET Framework (CE525)
  RAJESHBHAI 
TUTORIAL-5
Design a Form like below. When user Click on OK Button it will print “Welcome to
First Windows Application” on Label. When User Click on Cancel button form get closed.
public partial class Form1 : Form
InitializeComponent();
private void button1_Click(object sender, EventArgs e)
label2.Text = "Welcome to First Windows Application";
n2_Click(object sender, EventArgs e)

Design a Form like below. When user Click on OK Button it will print “Welcome to
First Windows Application” on Label. When User Click on Cancel button form get closed.
Enrollment Enterprise Computing ThroughNET Framework
  RAJESHBHAI
2 : Design a Form like below. When user click on Send Message Button it will display
combine message like below on label:“Message of <<Name>> from <<Orga
<<comment>>”
Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
namespace Tutorial5
{
public partial class Form3 : Form
{
public Form3()
{
InitializeComponent();
}
Enterprise Computing ThroughNET Framework (CE525)
  RAJESHBHAI 
2 : Design a Form like below. When user click on Send Message Button it will display
combine message like below on label:“Message of <<Name>> from <<Organization>> with
using System.Collections.Generic;
using System.Threading.Tasks;
public partial class Form3 : Form
InitializeComponent();

2 : Design a Form like below. When user click on Send Message Button it will display
nization>> with
Enrollment Enterprise Computing ThroughNET Framework
  RAJESHBHAI
private void button1_Click(object sender, EventArgs e)
{
String name = textBox1.Text;
String organization = textBox2.Text;
String comment = textBox3.Text;
label4.Text = $"Message of {name} from {organization} with {comment}";
}
}
}
Output:
3 : Design a form like below. Depends on User’s sel
of Form will change.
Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
Enterprise Computing ThroughNET Framework (CE525)
  RAJESHBHAI 
private void button1_Click(object sender, EventArgs e)
String name = textBox1.Text;
String organization = textBox2.Text;
String comment = textBox3.Text;
label4.Text = $"Message of {name} from {organization} with {comment}";
3 : Design a form like below. Depends on User’s selection, Background color and ForeColor
using System.Collections.Generic;

label4.Text = $"Message of {name} from {organization} with {comment}";
ection, Background color and ForeColor
Enrollment Enterprise Computing ThroughNET Framework
  RAJESHBHAI
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
namespace Tutorial5
{
public partial class Form2 : Form
{
public Form2()
{
InitializeComponent();
}
private void Form2_Load(object sender, EventArgs e)
{
if (radioButton1.Checked == true)
{
this.BackColor = Color.Red;
}
else if (radioButton2.Checked == true)
{
this.BackColor = Color.Green;
}
else if (radioButton3.Checked == true)
{
this.BackColor = Color.Blue;
}
else if (radioButton4.Checked == true)
{
this.ForeColor = Color.Black;
}
else if (radioButton5.C
{
this.ForeColor = Color.White;
}
else if (radioButton6.Checked == true)
{
this.ForeColor = Color.Red;
}
}
private void radioButton
{
this.BackColor = Color.Red;
}
private void radioButton2_CheckedChanged(object sender, EventArgs e)
{
this.BackColor = Color.Green;
}
Enterprise Computing ThroughNET Framework (CE525)
  RAJESHBHAI 
using System.Threading.Tasks;
public partial class Form2 : Form
InitializeComponent();
private void Form2_Load(object sender, EventArgs e)
(radioButton1.Checked == true)
this.BackColor = Color.Red;
else if (radioButton2.Checked == true)
this.BackColor = Color.Green;
tton3.Checked == true)
this.BackColor = Color.Blue;
else if (radioButton4.Checked == true)
this.ForeColor = Color.Black;
else if (radioButton5.Checked == true)
this.ForeColor = Color.White;
else if (radioButton6.Checked == true)
this.ForeColor = Color.Red;
private void radioButton1_CheckedChanged(object sender, EventArgs e)
this.BackColor = Color.Red;
private void radioButton2_CheckedChanged(object sender, EventArgs e)
this.BackColor = Color.Green;

1_CheckedChanged(object sender, EventArgs e)
private void radioButton2_CheckedChanged(object sender, EventArgs e)
Enrollment Enterprise Computing ThroughNET Framework
  RAJESHBHAI
private void radioButton3_CheckedChanged(object sender, EventArgs e)
{
this.BackColor = Color.Blue;
}
private void radioButton4_CheckedChanged(object sender, EventArgs e)
{
this.ForeColor = Color.Black
}
private void radioButton5_CheckedChanged(object sender, EventArgs e)
{
this.ForeColor = Color.White;
}
private void radioButton6_CheckedChanged(object sender, EventArgs e)
{
this.ForeColor = Color.Red;
}
}
}
Output:
Enterprise Computing ThroughNET Framework (CE525)
  RAJESHBHAI 
ivate void radioButton3_CheckedChanged(object sender, EventArgs e)
this.BackColor = Color.Blue;
private void radioButton4_CheckedChanged(object sender, EventArgs e)
this.ForeColor = Color.Black;
private void radioButton5_CheckedChanged(object sender, EventArgs e)
this.ForeColor = Color.White;
private void radioButton6_CheckedChanged(object sender, EventArgs e)
.ForeColor = Color.Red;

ivate void radioButton3_CheckedChanged(object sender, EventArgs e)
private void radioButton4_CheckedChanged(object sender, EventArgs e)
private void radioButton5_CheckedChanged(object sender, EventArgs e)
private void radioButton6_CheckedChanged(object sender, EventArgs e)
Enrollment Enterprise Computing ThroughNET Framework
  RAJESHBHAI
4 : Design a form like below. When user click on Answer button, selected operation
performed on given two numbers and answer is displayed on as shown.
Code:
using System;
using System.Collections.Gener
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
namespace Tutorial5
{
public partial class Form4 : Form
{
int first_no;
int second_no;
public Form4()
{
InitializeComponent();
}
private void button1_Click(object sender, EventArgs e)
{
first_no = Convert.ToInt32(textBox1.Text);
second_no = Convert.ToInt32(textBox2.Text);
int result;
if (radioButton1.Checked)
{
result = first_no + second_no;
label3.Text = $"{first_no} and {second_no} Addition is {result}";
}
if (radioButton3.Checked)
{
result = first_no
label3.Text = $"{first_no} and {second_no} Substration is {result}";
}
if (radioButton2.Checked)
{
result = first_no * second_no;
label3.Text = $"{first_no} and {second_no} Multiplication is
{result}";
}
if (radioButton4.Checked)
{
result = first_no / second_no;
label3.Text = $"{first_no} and {second_no} Division is {result}";
}
Enterprise Computing ThroughNET Framework (CE525)
  RAJESHBHAI 
4 : Design a form like below. When user click on Answer button, selected operation
performed on given two numbers and answer is displayed on as shown.
using System.Collections.Generic;
using System.Threading.Tasks;
public partial class Form4 : Form
InitializeComponent();
private void button1_Click(object sender, EventArgs e)
first_no = Convert.ToInt32(textBox1.Text);
= Convert.ToInt32(textBox2.Text);
if (radioButton1.Checked)
result = first_no + second_no;
label3.Text = $"{first_no} and {second_no} Addition is {result}";
if (radioButton3.Checked)
result = first_no - second_no;
label3.Text = $"{first_no} and {second_no} Substration is {result}";
if (radioButton2.Checked)
result = first_no * second_no;
label3.Text = $"{first_no} and {second_no} Multiplication is
if (radioButton4.Checked)
result = first_no / second_no;
label3.Text = $"{first_no} and {second_no} Division is {result}";

4 : Design a form like below. When user click on Answer button, selected operation
label3.Text = $"{first_no} and {second_no} Addition is {result}";
label3.Text = $"{first_no} and {second_no} Substration is {result}";
label3.Text = $"{first_no} and {second_no} Multiplication is
label3.Text = $"{first_no} and {second_no} Division is {result}";
Enrollment Enterprise Computing ThroughNET Framework
  RAJESHBHAI
}
}
}
Output:
Enterprise Computing ThroughNET Framework (CE525)
  RAJESHBHAI 









Tutorial -2(Array)

1 : Write a C# Sharp program that stores elements in an array and prints them.
Code:
using System;
public class ArrayDemo
{										
	static void Main()					
	{									
		//int x[5];  //c or c++						
		int[] n = new int[5];  //arr/java or c#
		for (int i = 0; i < n.Length; i++)
		{
			Console.Write("Enter the number: ");
			n[i] = Convert.ToInt32(Console.ReadLine());
		}
		Console.WriteLine("\nArray Elements: ");
        for (int i = 0; i < n.Length; i++)
        {
			Console.WriteLine(n[i]);
        }
    }
}
Output:
 
2 : Write a program of sorting an array. Declare single dimensional array and accept 5 integer
values from the user. Then sort the input in ascending order and display output.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        int[] arr = new int[5];
        Console.WriteLine("Enter 5 integer values:");
        for (int i = 0; i < 5; i++)
        {
            arr[i] = Convert.ToInt32(Console.ReadLine());
        }
        Array.Sort(arr);
        Console.WriteLine("Sorted array in ascending order:");
        foreach (int num in arr)
        {
            Console.Write(num + "");
        }
    }
}
Output:
  
3 : Write a C# Sharp program to read n values in an array and display them in reverse order.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        Console.Write("Enter the number of elements: ");
        int n = Convert.ToInt32(Console.ReadLine());
        int[] arr = new int[n];
        Console.WriteLine("Enter the elements:");
        for (int i = 0; i < n; i++)
        {
            arr[i] = Convert.ToInt32(Console.ReadLine());
        }
        Console.WriteLine("Array in reverse order:");
        for (int i = n - 1; i >= 0; i--)
        {
            Console.Write(arr[i] + "");
        }
    }
}
Output:
 
4 : Write a C# Sharp program to copy the elements of one array into another array.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        int[] source = { 1, 2, 3, 4, 5 };
        int[] destination = new int[source.Length];
        Array.Copy(source, destination, source.Length);
        Console.WriteLine("Copied elements in the new array:");
        foreach (int num in destination)
        {
            Console.Write(num + "");
        }
    } 
}
Output:
 
 
5 : Write a C# Sharp program to count duplicate elements in an array.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        int[] arr = { 1, 2, 2, 3, 4, 4, 4, 5 };
        int count = 0;
        for (int i = 0; i < arr.Length; i++)
        {
            for (int j = i + 1; j < arr.Length; j++)
            {
                if (arr[i] == arr[j])
                {
                    count++;
                    break;
                }
            }
        }
        Console.WriteLine("Total duplicate elements in the array: " + count);
    }
}
Output: 
 
6: Write a C# Sharp program to find the maximum and minimum elements in an array.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        int[] arr = { 23, 45, 67, 89, 12, 34, 56 };
        int max = arr[0];
        int min = arr[0];
        foreach (int num in arr)
        {
            if (num > max)
                max = num;
            if (num < min)
                min = num;
        }
        Console.WriteLine("Maximum element: " + max);
        Console.WriteLine("Minimum element: " + min);
    }
}
Output: 
 
7 : Write a program in C# Sharp to separate odd and even integers into separate arrays.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        int[] arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        int[] evenArr = Array.FindAll(arr, x => x % 2 == 0);
        int[] oddArr = Array.FindAll(arr, x => x % 2 != 0);
        Console.WriteLine("Even elements:");
        foreach (int num in evenArr)
        {
            Console.Write(num + "");
        }
        Console.WriteLine("\nOdd elements:");
        foreach (int num in oddArr)
        {
            Console.Write(num + "");
        }
        Console.WriteLine();
    }
}
Output:
 
8 : Write a C# Sharp program to sort array elements in descending order.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        int[] arr = new int[5];
        Console.WriteLine("Enter 5 integer values:");
        for (int i = 0; i < 5; i++)
        {
            arr[i] = Convert.ToInt32(Console.ReadLine());
        }
        Array.Sort(arr);
        Array.Reverse(arr);
        Console.WriteLine("Sorted array in descending order:");
        foreach (int num in arr)
        {
            Console.Write(num + "");
        }
        Console.WriteLine();
    }
}
Output:
 
9 : Write a C# Sharp program to delete an element at the desired position from an array.
Code:
using System;
class Program
{
    static void Main()
    {
        int[] arr = { 1, 2, 3, 4, 5 };
        Console.Write("Enter the position to delete (0 to 4): ");
        int pos = Convert.ToInt32(Console.ReadLine());
        for (int i = pos; i < arr.Length - 1; i++)
        {
            arr[i] = arr[i + 1];
        }
        Console.WriteLine("Array after deletion:");
        for (int i = 0; i < arr.Length - 1; i++)
        {
            Console.Write(arr[i] + "");
        }
        Console.WriteLine();
    }
}
Output:
 
10 : Write a C# Sharp program for adding two matrices of the same size.
Code:
using System;
class ArrayDemo
{
    static void Main()
    {
        int[,] matrix1 = { { 1, 2 }, { 3, 4 } };
        int[,] matrix2 = { { 5, 6 }, { 7, 8 } };
        int[,] result = new int[2, 2];
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 2; j++)
            {
                result[i, j] = matrix1[i, j] + matrix2[i, j];
            }
        }
        Console.WriteLine("Resultant matrix after addition:");
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 2; j++)
            {
                Console.Write(result[i, j] + "");
            }
            Console.WriteLine();
        }
    }
}
Output:
 






Tutorial – 6

1 : Design an application like follow. Depends on user selection it will display the message as shown. (If gender is Male then Mr. or Female then Miss)

Code:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string name = textBox1.Text;
            string gender = radioButton1.Checked ? "Mr." : "Miss";
            string sources = "";

            if (checkBox1.Checked) sources += "News Paper, ";
            if (checkBox2.Checked) sources += "Friends, ";
            if (checkBox3.Checked) sources += "Website, ";
            if (checkBox4.Checked)
            {
                sources += textBox2.Text + ", ";
            }

            if (sources.EndsWith(", "))
            {
                sources = sources.Substring(0, sources.Length - 2); // Remove last comma and space
            }

            string message = $"Hello {gender} {name}. You know about us from {sources}.";
            label4.Text = message;
    }
    }
}

Output:
 

2 : Design a form like below. Implement Following functionality to the application.
•	Fill button click fill up the list box with items. 
•	Count button click retrieve Total no of Items in List box 
•	Sort button click will arrange the List Items in Ascending order 
•	Clear Button will clear all the items from List Box 
•	Remove Items button will remove the selected item from ListBox

Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form2 : Form
    {
        public Form2()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            listBox1.Items.Clear(); // Clear existing items
            listBox1.Items.Add("Education");
            listBox1.Items.Add("Food for all");
            listBox1.Items.Add("Freedom of Speech");
            listBox1.Items.Add("Good Books");
            listBox1.Items.Add("Good Movies");
        }

        private void button5_Click(object sender, EventArgs e)
        {
            label1.Text = $"Total Items: {listBox1.Items.Count}";
        }

        private void button2_Click(object sender, EventArgs e)
        {
            var sortedItems = listBox1.Items.Cast<string>().OrderBy(item => item).ToArray();
            listBox1.Items.Clear();
            listBox1.Items.AddRange(sortedItems);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            listBox1.Items.Clear();
            label1.Text = "Total Items: 0"; // Reset the total count label
            label2.Text = "Your Selection: "; // Reset the selection label
        }

        private void button4_Click(object sender, EventArgs e)
        {
            if (listBox1.SelectedItem != null)
            {
                listBox1.Items.Remove(listBox1.SelectedItem);
            }
            else
            {
                MessageBox.Show("Please select an item to remove.");
            }
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox1.SelectedItem != null)
            {
                label2.Text = $"Your Selection: {listBox1.SelectedItem.ToString()}";
            }
        }
    }
}
Output:
 
 

3: Design an application which has three textboxes. Implement restricted policy for each textbox to enter data only in numeric form, uppercase, characters

Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form3 : Form
    {
        public Form3()
        {
            InitializeComponent();
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }
        }

        private void textBox2_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsUpper(e.KeyChar))
            {
                e.Handled = true;
            }
        }

        private void textBox3_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsLetter(e.KeyChar))
            {
                e.Handled = true;
            }
        }
    }
}
Output:
 




TUTORIAL – 7

1.	Design an application like follow. It provides the facility to user for exchanging single, multiple or all the item from one list box to other list box and vice versa.
Code:
using System;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form4 : Form
    {
        public Form4()
        {
            InitializeComponent();
        }
        private void button1_Click_1(object sender, EventArgs e)
        {
            if (listBox1.SelectedItem != null)
            {
                listBox2.Items.Add(listBox1.SelectedItem);
                listBox1.Items.Remove(listBox1.SelectedItem);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            while (listBox1.SelectedItems.Count > 0)
            {
                listBox2.Items.Add(listBox1.SelectedItems[0]);
                listBox1.Items.Remove(listBox1.SelectedItems[0]);
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            foreach (var item in listBox1.Items)
            {
                listBox2.Items.Add(item);
            }
            listBox1.Items.Clear();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            if (listBox2.SelectedItem != null)
            {
                listBox1.Items.Add(listBox2.SelectedItem);
                listBox2.Items.Remove(listBox2.SelectedItem);
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            while (listBox2.SelectedItems.Count > 0)
            {
                listBox1.Items.Add(listBox2.SelectedItems[0]);
                listBox2.Items.Remove(listBox2.SelectedItems[0]);
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            foreach (var item in listBox2.Items)
            {
                listBox1.Items.Add(item);
            }
            listBox2.Items.Clear();
        } } }

Output:

 
 
 

2.	Design an application which implements concept of different dialog boxes.
Code:
using System;
using System.Drawing;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form5 : Form
    {
        public Form5()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Image Files (*.jpg; *.jpeg; *.png)|*.jpg;*.jpeg;*.png";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                pictureBox1.Image = new Bitmap(openFileDialog.FileName);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            FontDialog fontDialog = new FontDialog();

            if (fontDialog.ShowDialog() == DialogResult.OK)
            {
                label1.Font = fontDialog.Font;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            ColorDialog colorDialog = new ColorDialog();

            if (colorDialog.ShowDialog() == DialogResult.OK)
            {
                this.BackColor = colorDialog.Color;
            }
        }
    }
}
Output:
 
 

 


3.	Design an application which looks like follow. Implement said functionality.
Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form6 : Form
    {
        public Form6()
        {
            InitializeComponent();

            // Populate the font ComboBox
            comboBox1.Items.AddRange(new string[] { "Arial", "Calibri", "Courier", "Georgia", "Latin", "Script" });
            comboBox1.SelectedIndex = 0;  // Set default font

            // Populate the font size ComboBox (1 to 15)
            for (int i = 1; i <= 15; i++)
            {
                comboBox2.Items.Add(i.ToString());
            }
            comboBox2.SelectedIndex = 11;  // Set default size (index for size 12)
        }

        private void button1_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Text Files (*.txt)|*.txt";

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                File.WriteAllText(saveFileDialog.FileName, textBox1.Text);
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Text Files (*.txt)|*.txt";

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                textBox1.Text = File.ReadAllText(openFileDialog.FileName);
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            textBox1.Clear();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            Font currentFont = textBox1.Font;
            textBox1.Font = new Font(currentFont, currentFont.Style ^ FontStyle.Bold);
        }

        private void button5_Click(object sender, EventArgs e)
        {
            Font currentFont = textBox1.Font;
            textBox1.Font = new Font(currentFont, currentFont.Style ^ FontStyle.Italic);
        }

        private void button6_Click(object sender, EventArgs e)
        {
            Font currentFont = textBox1.Font;
            textBox1.Font = new Font(currentFont, currentFont.Style ^ FontStyle.Underline);
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedFont = comboBox1.SelectedItem.ToString();
            float currentSize = textBox1.Font.Size;
            textBox1.Font = new Font(selectedFont, currentSize);
        }

        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            float selectedSize = float.Parse(comboBox2.SelectedItem.ToString());
            string currentFont = textBox1.Font.FontFamily.Name;
            textBox1.Font = new Font(currentFont, selectedSize);
        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (textBox1.SelectedText != "")
            {
                Clipboard.SetText(textBox1.SelectedText);
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            textBox1.SelectedText = Clipboard.GetText();
        }

        private void button9_Click(object sender, EventArgs e)
        {
            textBox1.Undo();
        }

        private void button10_Click(object sender, EventArgs e)
        {
            // This is a placeholder as TextBox doesn't have built-in Redo.
        }
    }
}

Output:


 


Tutorial – 8

1.	Design an application which has One TreeView control to display State and its district information. It provides the facility to user to Clear, Count, Expand, Collapse, Add Root, Add as Child Root, Selected Remove.

Code:

using System;
using System.Windows.Forms;

namespace tutorial_8
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            treeView1.Nodes.Clear();
        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            int count = CountNodes(treeView1.Nodes);
            MessageBox.Show($"Total Nodes: {count}");
        }

        private int CountNodes(TreeNodeCollection nodes)
        {
            int count = nodes.Count;
            foreach (TreeNode node in nodes)
            {
                count += CountNodes(node.Nodes);
            }
            return count;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            treeView1.CollapseAll();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            treeView1.ExpandAll();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox1.Text))
            {
                treeView1.Nodes.Add(textBox1.Text);
                textBox1.Clear();
            }
            else
            {
                MessageBox.Show("Please enter root text.");
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            if(treeView1.SelectedNode!=null && !string.IsNullOrEmpty(textBox2.Text))
            {
                treeView1.SelectedNode.Nodes.Add(textBox2.Text);
                treeView1.SelectedNode.Expand();
                textBox2.Clear();
            }
            else
            {
                MessageBox.Show("Please select a node and enter child text.");
            }
        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (treeView1.SelectedNode != null)
            {
                treeView1.SelectedNode.Remove();
            }
            else
            {
                MessageBox.Show("Please select a node to remove.");
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            textBox1.Clear();
            textBox2.Clear();
        }

} }
Output:
 

 
 

 

 

 

2.	Design an application which works like traffic signal.
Code:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace tutorial_8
{
    public partial class Form2 : Form
    {
        private Timer trafficTimer;
        private int lightState; 

        public Form2()
        {
            InitializeComponent();
            InitializeTrafficSignal();
        }
        private void InitializeTrafficSignal()
        {
            trafficTimer = new Timer();
            trafficTimer.Interval = 1000;
            trafficTimer.Tick += new EventHandler(TrafficTimer_Tick);

            lightState = 0;
            UpdateTrafficLight();
        }

        private void TrafficTimer_Tick(object sender, EventArgs e)
        {
            lightState = (lightState + 1) % 3;
            UpdateTrafficLight();
        }

        private void UpdateTrafficLight()
        {
            pictureBoxRed.BackColor = System.Drawing.Color.Black;
            pictureBoxYellow.BackColor = System.Drawing.Color.Black;
            pictureBoxGreen.BackColor = System.Drawing.Color.Black;

            if (lightState == 0)
                pictureBoxRed.BackColor = System.Drawing.Color.Red;
            else if (lightState == 1)
                pictureBoxYellow.BackColor = System.Drawing.Color.Yellow;
            else if (lightState == 2)
                pictureBoxGreen.BackColor = System.Drawing.Color.Green;
        }

        private void btnStart_Click_1(object sender, EventArgs e)
        {
            trafficTimer.Start();
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            trafficTimer.Stop();
        }
    }    
}        
         
Output:

 
 
 

3.	Design an application like follow which provide the facility to user for cut, copy and paste.

Code:
using System;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace tutorial_8
{
    public partial class Form3 : Form
    {
        public Form3()
        {
            InitializeComponent();
        }

        private void btnCut_Click_1(object sender, EventArgs e)
        {
            if (textBox1.SelectedText != "")
            {
                Clipboard.SetText(textBox1.SelectedText);
                textBox1.SelectedText = ""; 
            }
        }

        private void btnCopy_Click(object sender, EventArgs e)
        {
            if (textBox1.SelectedText != "")
            {
                Clipboard.SetText(textBox1.SelectedText); // Copies the selected text
            }
        }

        private void btnPaste_Click(object sender, EventArgs e)
        {
            if (Clipboard.ContainsText())
            {
                int selectionStart = textBox1.SelectionStart;
                textBox1.Text = textBox1.Text.Insert(selectionStart, Clipboard.GetText());
            }
        }
    }
}

Output:

 

 

 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


TUTORIAL – 9

1.	Design an application which will demonstrate the operations like Insert, Update and Delete on data using Connected Approach. 

CODE:
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace Tutorial9
{
    public partial class Form1 : Form
    {
        private SqlConnection con;
        private SqlDataAdapter da;
        private DataTable dt;

        public Form1()
        {
            InitializeComponent();
        }

        // Insert Button
        private void button2_Click(object sender, EventArgs e)
        {
            string query;
            string constring = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial9\\student.mdf;Integrated Security=True";
            SqlConnection con = new SqlConnection(constring);
            con.Open();
            query = "insert into student(name,course,dob,address,mob)values(@name,@course,@dob,@address,@mob)";
            SqlCommand cmd = new SqlCommand(query, con);
            cmd.Parameters.AddWithValue("@name", textBox1.Text);
            cmd.Parameters.AddWithValue("@course", textBox2.Text);
            cmd.Parameters.AddWithValue("@dob", textBox3.Text);
            cmd.Parameters.AddWithValue("@address", textBox4.Text);
            cmd.Parameters.AddWithValue("@mob", Convert.ToInt32(textBox5.Text));
            cmd.ExecuteNonQuery();
            con.Close();
            MessageBox.Show("Registered Successfully!!!😊");
        }

        // Update Button
        private void button4_Click(object sender, EventArgs e)
        {
            string constring = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial9\\student.mdf;Integrated Security=True";
            con = new SqlConnection(constring);
            con.Open();
            SqlCommandBuilder builder = new SqlCommandBuilder(da);
            DataTable changes = dt.GetChanges();
            if (changes != null)
            {
                da.UpdateCommand = builder.GetUpdateCommand(); 
                da.Update(changes); 
                dt.AcceptChanges();  
                MessageBox.Show("Data updated successfully.");
            }
            else
            {
                MessageBox.Show("No changes detected.");
            }

            con.Close();
        }

        // View Button (Load Data)
        private void button1_Click(object sender, EventArgs e)
        {
            string query;
            string constring = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial9\\student.mdf;Integrated Security=True";
            con = new SqlConnection(constring);
            con.Open();

            query = "select * from student";
            SqlCommand cmd = new SqlCommand(query, con);
            da = new SqlDataAdapter(cmd);
            dt = new DataTable();
            da.Fill(dt);
            dataGridView1.DataSource = dt;
            dataGridView1.ReadOnly = true;

            con.Close();
        }

        // Edit Button (Enable Editing in DataGridView)
        private void button3_Click(object sender, EventArgs e)
        {
            dataGridView1.ReadOnly = false;  
            MessageBox.Show("You can now edit the data. Click 'Update' to save changes.");
        }

        // Delete Button

        private void button5_Click_1(object sender, EventArgs e)
        {
            string constring = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial9\\student.mdf;Integrated Security=True";
            con = new SqlConnection(constring);
            con.Open();

            int selectedRow = dataGridView1.CurrentCell.RowIndex;  
            string id = dataGridView1.Rows[selectedRow].Cells["id"].Value.ToString();  
            string query = "delete from student where id=@id";
            SqlCommand cmd = new SqlCommand(query, con);
            cmd.Parameters.AddWithValue("@id", id);
            cmd.ExecuteNonQuery();
            dataGridView1.Rows.RemoveAt(selectedRow);

            con.Close();
            MessageBox.Show("Record deleted successfully.");
        }
    }
}

OUTPUT:

 

 

 

 

 

2.	Design an application which provide the search facility from database records using DataGridView component.

CODE:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;
using System.Data.SqlClient;
using System.Windows.Forms;


namespace Tutorial9
{
    public partial class Form2 : Form
    {
        string connectionString = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial9\\student.mdf;Integrated Security=True";
        public Form2()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string query = textBox1.Text; 
            SearchDatabase(query);
        }
        private void SearchDatabase(string name)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                try
                {
                    conn.Open();
                    string sql = "SELECT * FROM student WHERE name LIKE @name";
                    SqlCommand cmd = new SqlCommand(sql, conn);
                    cmd.Parameters.AddWithValue("@Name", "%" + name + "%");
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    dataGridView1.DataSource = dt;
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }
    }
}

OUTPUT:

 



TUTORIAL – 10


Exercise – 1

1.	Design customer table and insert 4 records.
Output:
 




2.	Design “Orders” table and insert 6 records for above custids only 
Output:
 














Exercise – 2
1.	When you press the new or save buttons, the following window should be shown.
Output:
 

2.	When you press the Edit button, the following window should be shown.
Customer ID - Filled up from database table - Customers
Customer name - Automatically changed based on customer id selection
Payment mode - UPI, RuPay Cards, Debit Cards, NetBanking, Wallet
DataGrid View : Show OrderID, CustomerID, CustomerName, OrderAmount, PaymentMode

Code:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace Tutorial
{
    public partial class Form8 : Form
    {
        private SqlConnection connection;
        public Form8()
        {
            InitializeComponent();
            connection = new SqlConnection("Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial\\Customer.mdf;Integrated Security=True");
            FillCustomerIDComboBox();
            LoadCustomerData();
        }
        private void FillCustomerIDComboBox()
        {
            try
            {
                connection.Open();
                SqlCommand cmd = new SqlCommand("SELECT CustID, Name FROM customer", connection);
                SqlDataReader reader = cmd.ExecuteReader();

                DataTable dt = new DataTable();
                dt.Load(reader);
                comboBox1.DisplayMember = "CustID";
                comboBox1.ValueMember = "CustID";
                comboBox1.DataSource = dt;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                connection.Close();
            }
        }

        private void LoadCustomerData()
        {
            connection.Open();
            SqlCommand cmd = new SqlCommand("SELECT CustID, Name FROM customer", connection);
            SqlDataReader reader = cmd.ExecuteReader();

            DataTable dt = new DataTable();
            dt.Load(reader);
            comboBox2.DisplayMember = "Name";
            comboBox2.ValueMember = "Name";
            comboBox2.DataSource = dt;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                connection.Open();
                SqlCommand cmd = new SqlCommand("SELECT o.OrderId, o.CustID, c.Name AS CustomerName, o.OrderAmount, o.PaymentMode " +
                                                "FROM orders o " +
                                                "JOIN customer c ON o.CustID = c.CustID", connection);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                adapter.Fill(dt);
                dataGridView1.DataSource = dt;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                connection.Close();
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            LoadFormWithHiddenFields();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            LoadFormWithHiddenFields();
            if (comboBox1.SelectedIndex == -1 ||
                string.IsNullOrEmpty(comboBox2.Text) ||
                string.IsNullOrEmpty(textBox1.Text) ||
                string.IsNullOrEmpty(textBox2.Text) ||
                string.IsNullOrEmpty(textBox3.Text) ||
                comboBox3.SelectedIndex == -1 ||
                string.IsNullOrEmpty(textBox4.Text))
            {
                MessageBox.Show("Please fill out all the fields.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            try
            {
                connection.Open();
                SqlCommand cmd = new SqlCommand("INSERT INTO orders (CustID, OrderDate, ShipDate, OrderAmount, PaymentMode, Remarks) " +
                                                "VALUES (@CustID, @OrderDate, @ShipDate, @OrderAmount, @PaymentMode, @Remarks)", connection);

                cmd.Parameters.AddWithValue("@CustID", (int)comboBox1.SelectedValue);
                cmd.Parameters.AddWithValue("@OrderDate", textBox1.Text);
                cmd.Parameters.AddWithValue("@ShipDate", textBox2.Text);
                cmd.Parameters.AddWithValue("@OrderAmount", textBox3.Text);
                cmd.Parameters.AddWithValue("@PaymentMode", comboBox3.SelectedItem.ToString());
                cmd.Parameters.AddWithValue("@Remarks", textBox4.Text);

                cmd.ExecuteNonQuery();
                MessageBox.Show("Order saved successfully!");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                connection.Close();
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            comboBox1.SelectedIndex = -1;
            comboBox2.SelectedIndex = -1;
            textBox1.Clear();
            textBox2.Clear();
            textBox3.Clear();
            comboBox3.SelectedIndex = -1;
            textBox4.Clear();
            textBox5.Clear();
        }
        private void LoadFormWithHiddenFields()
        {
            label8.Visible = false;
            textBox5.Visible = false;
            button9.Visible = false;
            button1.Visible = false;
        }

        private void LoadFormWithVisibleFields()
        {
            label8.Visible = true;
            textBox5.Visible = true;
            button9.Visible = true;
            button1.Visible = true;
        }

        private void button5_Click(object sender, EventArgs e)
        {
            LoadFormWithVisibleFields();
        }

        private void button6_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(comboBox1.Text) ||
               string.IsNullOrEmpty(comboBox2.Text) ||
               string.IsNullOrEmpty(textBox1.Text) ||
               string.IsNullOrEmpty(textBox2.Text) ||
               string.IsNullOrEmpty(textBox3.Text) ||
               string.IsNullOrEmpty(comboBox3.Text) ||
               string.IsNullOrEmpty(textBox4.Text))
            {
                MessageBox.Show("Please fill out all fields.");
                return;
            }

            int orderId;
            if (int.TryParse(textBox5.Text, out orderId))
            {
                try
                {
                    connection.Open();
                    string query = "UPDATE orders SET CustID = @CustID, OrderDate = @OrderDate, ShipDate = @ShipDate, " +
                                   "OrderAmount = @OrderAmount, PaymentMode = @PaymentMode, Remarks = @Remarks " +
                                   "WHERE OrderId = @OrderId";

                    SqlCommand cmd = new SqlCommand(query, connection);
                    cmd.Parameters.AddWithValue("@CustID", comboBox1.SelectedValue);
                    cmd.Parameters.AddWithValue("@OrderDate", textBox1.Text);
                    cmd.Parameters.AddWithValue("@ShipDate", textBox2.Text);
                    cmd.Parameters.AddWithValue("@OrderAmount", textBox3.Text);
                    cmd.Parameters.AddWithValue("@PaymentMode", comboBox3.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@Remarks", textBox4.Text);
                    cmd.Parameters.AddWithValue("@OrderId", orderId);

                    int rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected > 0)
                    {
                        MessageBox.Show("Order updated successfully!");
                    }
                    else
                    {
                        MessageBox.Show("No order found with the specified OrderID.");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                finally
                {
                    connection.Close();
                }
            }
            else
            {
                MessageBox.Show("Please enter a valid OrderID.");
            }
        }

        private void button7_Click(object sender, EventArgs e)
        {
            if (dataGridView1.SelectedRows.Count > 0)
            {
                int orderId = Convert.ToInt32(dataGridView1.SelectedRows[0].Cells["OrderID"].Value);
                DialogResult dialogResult = MessageBox.Show("Are you sure you want to delete this order?", "Confirm Delete", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    try
                    {
                        connection.Open();
                        string query = "DELETE FROM orders WHERE OrderId = @OrderId";
                        SqlCommand cmd = new SqlCommand(query, connection);
                        cmd.Parameters.AddWithValue("@OrderId", orderId);
                        int rowsAffected = cmd.ExecuteNonQuery();
                        if (rowsAffected > 0)
                        {
                            MessageBox.Show("Order deleted successfully!");
                        }
                        else
                        {
                            MessageBox.Show("No order found with the specified OrderID.");
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
            else
            {
                MessageBox.Show("Please select an order to delete.");
            }
        }

        private void button9_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox5.Text))
            {
                int orderId;
                if (int.TryParse(textBox5.Text, out orderId))
                {
                    try
                    {
                        connection.Open();
                        string query = "SELECT CustID FROM orders WHERE OrderId = @OrderId";
                        SqlCommand cmd = new SqlCommand(query, connection);
                        cmd.Parameters.AddWithValue("@OrderId", orderId);
                        int custId = 0;
                        SqlDataReader reader = cmd.ExecuteReader();
                        if (reader.Read())
                        {
                            custId = (int)reader["CustID"];
                        }
                        else
                        {
                            MessageBox.Show("No record found with the provided OrderID.");
                            return;
                        }
                        reader.Close();
                        string detailsQuery = "SELECT o.OrderDate, o.ShipDate, o.OrderAmount, o.PaymentMode, o.Remarks, c.Name AS CustomerName " +
                                              "FROM Orders o " +
                                              "JOIN Customer c ON o.CustID = c.CustId " +
                                              "WHERE o.CustID = @CustID AND o.OrderId = @OrderId";
                        SqlCommand detailsCmd = new SqlCommand(detailsQuery, connection);
                        detailsCmd.Parameters.AddWithValue("@CustID", custId);
                        detailsCmd.Parameters.AddWithValue("@OrderId", orderId);
                        SqlDataReader detailsReader = detailsCmd.ExecuteReader();
                        if (detailsReader.Read())
                        {
                            comboBox1.SelectedValue = custId;
                            comboBox2.Text = detailsReader["CustomerName"].ToString();
                            textBox1.Text = detailsReader["OrderDate"].ToString();
                            textBox2.Text = detailsReader["ShipDate"].ToString();
                            textBox3.Text = detailsReader["OrderAmount"].ToString();
                            string paymentMode = detailsReader["PaymentMode"].ToString();
                            comboBox3.SelectedItem = paymentMode;
                            textBox4.Text = detailsReader["Remarks"].ToString();
                        }
                        else
                        {
                            MessageBox.Show("No details found for the provided OrderID and CustID.");
                        }
                        detailsReader.Close();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
                else
                {
                    MessageBox.Show("Please enter a valid OrderID.");
                }
            }
            else
            {
                MessageBox.Show("Please enter an OrderID to search.");
            }
        }
 
        private void Form8_Load(object sender, EventArgs e)
        {
         
            this.customerTableAdapter.Fill(this.dt.customer);

        }
    }
}


Output:

 
 










Exercise – 3

Task : 1 Design the form as per below screenshot

Output:

 

Task : 2 Write code for submit button click

Code:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form9 : Form
    {
        public Form9()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (Convert.ToInt32(comboBox1.SelectedItem) == 1)
            {
                string query = "SELECT o.OrderId, o.CustID, c.Name, c.City, c.State, o.OrderAmount FROM customer c JOIN orders o ON c.CustID = o.CustID";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 2)
            {
                string query = "SELECT o.OrderId, o.CustID, c.Name, c.City, c.State, o.OrderAmount  FROM customer c, Orders o WHERE c.CustID = o.CustID AND o.OrderAmount > 10000";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 3)
            {
                string query = "SELECT c.CustID, c.Name, SUM(o.OrderAmount) AS TotalOrderAmount FROM customer c, orders o WHERE c.CustID = o.CustID GROUP BY c.CustID, c.Name";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 4)
            {
                string query = "SELECT c.CustID, c.Name, o.OrderAmount, MONTH(o.OrderDate) AS OrderMonth, YEAR(o.OrderDate) AS OrderYear FROM customer c, orders o WHERE c.CustID = o.CustID";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 5)
            {
                string query = "SELECT o.PaymentMode, SUM(o.OrderAmount) AS TotalOrderAmount FROM orders o GROUP BY o.PaymentMode";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 6)
            {
                string query = "SELECT o.PaymentMode, SUM(o.OrderAmount) AS TotalOrderAmount FROM orders o WHERE YEAR(o.OrderDate) = YEAR(GETDATE()) GROUP BY o.PaymentMode";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 7)
            {
                string query = "SELECT o.PaymentMode, SUM(o.OrderAmount) AS TotalOrderAmount FROM orders o WHERE YEAR(o.OrderDate) = YEAR(GETDATE()) - 1 GROUP BY o.PaymentMode";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 8)
            {
                string fromDate = "2023-01-01";
                string toDate = "2023-12-31";
                string query = "SELECT o.PaymentMode, SUM(o.OrderAmount) AS TotalOrderAmount  FROM orders o WHERE o.OrderDate BETWEEN '{fromDate}' AND '{toDate}' GROUP BY o.PaymentMode";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 9)
            {
                string query = "SELECT o.OrderId, o.CustID, o.PaymentMode, c.Name, c.City, c.State, o.OrderAmount FROM customer c, orders o WHERE c.CustID = o.CustID AND o.PaymentMode = 'Credit Card'";
                ExecuteJoinQuery(query);
            }
            else if (Convert.ToInt32(comboBox1.SelectedItem) == 10)
            {
                string query = "SELECT o.OrderId, o.CustID, o.ShipDate, o.OrderAmount FROM orders o WHERE o.OrderAmount BETWEEN 5000 AND 15000";
                ExecuteJoinQuery(query);
            }
        }
        void ExecuteJoinQuery(string q)
        {
            string conStr = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial\\Customer.mdf;Integrated Security=True";
            SqlConnection con = new SqlConnection(conStr);
            con.Open();
            string query = "Select o.OrderId, o.CustID, c.Name, c.City, " + "c.State, o.OrderAmount " + "From customer c, orders o " + "WHERE c.CustID= o.CustID";

            SqlDataAdapter adp = new SqlDataAdapter(query, con);
            DataSet ds = new DataSet();
            adp.Fill(ds);
            dgvCustomerOrderBindingSource.DataSource = ds.Tables[0];
        }

        private void Form9_Load(object sender, EventArgs e)
        {
            //// TODO: This line of code loads data into the 'dgvCustomerOrder.orders' table. You can move, or remove it, as needed.
            this.ordersTableAdapter.Fill(this.dgvCustomerOrder.orders);
            //// TODO: This line of code loads data into the 'dgvCustomerOrder.customer' table. You can move, or remove it, as needed.
            this.customerTableAdapter.Fill(this.dgvCustomerOrder.customer);

        }
    }
}

Output:

 

Exercise – 4

Task : 1 Design an application which looks like below. Whenever user click on Fill button, application will fetches the records from database and display it into the GridView.

Code:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;

namespace Tutorial
{
    public partial class Form10 : Form
    {
        public Form10()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string connectionString = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\Tutorial\\Customer.mdf;Integrated Security=True";
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                try
                {
                    con.Open();

                    string query = @"SELECT o.OrderId, o.CustID, c.Name, c.City, c.State, o.OrderAmount FROM customer c JOIN orders o ON c.CustID = o.CustID";

                    SqlDataAdapter adapter = new SqlDataAdapter(query, con);
                    DataSet ds = new DataSet();
                    adapter.Fill(ds);

                    dataGridView1.DataSource = ds.Tables[0];

                    dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }
    }
}

Output:

 














Exercise – 5

Task : 1 Design an application which will create a table, add columns, rows and fill
data into it and display the table data using a DataGridView object.

Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Tutorial
{
    public partial class Form11 : Form
    {
        public Form11()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            DataTable table = new DataTable();
            table.Columns.Add("ID", typeof(int));
            table.Columns.Add("Name", typeof(string));
            table.Columns.Add("Age", typeof(int));
            table.Columns.Add("Address", typeof(string));
            table.Columns.Add("Salary", typeof(decimal));

            table.Rows.Add(1, "Ramesh", 32, "Ahmedabad", 2000.00m);
            table.Rows.Add(2, "Kiran", 25, "Delhi", 1500.00m);
            table.Rows.Add(3, "Kaushik", 23, "Kota", 2000.00m);
            table.Rows.Add(4, "Chatali", 26, "Mumbai", 6500.00m);
            table.Rows.Add(5, "Hardik", 27, "Bhopal", 8500.00m);
            table.Rows.Add(6, "Kamod", 29, "MP", 4500.00m);

            dataGridView1.DataSource = table;

            dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
        }
    }
}

Output:

 













Exercise – 6

Task : 1 Design an application which allows the user to send the mail using application.
Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net;
using System.Net.Mail;

namespace Tutorial
{
    public partial class Form12 : Form
    {
        public Form12()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string fromAddress = textBox1.Text;
            string toAddress = textBox2.Text;
            string messageBody = textBox3.Text;

            try
            {
                MailMessage mail = new MailMessage(fromAddress, toAddress)
                {
                    Subject = "Test", // Customize your subject
                    Body = messageBody
                };

                SmtpClient smtp = new SmtpClient("smtp.gmail.com", 465) 
                {
                    Credentials = new NetworkCredential("516@gmail.com", "123"),
                    EnableSsl = true 
                };

                // Send the email
                smtp.Send(mail);
                MessageBox.Show("Email sent successfully!");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error sending email: " + ex.Message);
            }
        }
    }
}


Output:

 





Notepad

Notepad

code

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Printing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Student_Management_System
{
    public partial class Notepad : Form
    {

        private PrintDocument printDocument;

        public Notepad()
        {
            InitializeComponent();
            printDocument = new PrintDocument();
            printDocument.PrintPage += new PrintPageEventHandler(printDocument_PrintPage);
        }

        private void Form2_Load(object sender, EventArgs e)
        {

        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog o = new OpenFileDialog();
            o.Title = "Open a Text File";
            o.Filter = "Text Documents (*.txt)|*.txt";
            //o.Filter = "All Files (*.*)|*.*|Text Documents (*.txt)|*.txt";
            DialogResult dr = o.ShowDialog();
            if (dr == DialogResult.OK)
            {
                TextReader tr = new StreamReader(o.FileName);
                textBox1.Text = tr.ReadToEnd();
                tr.Close();
            }

        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog sf = new SaveFileDialog();
            sf.Title = "Save a Text FIle";
            sf.Filter = "Text Documents (*.txt)|*.txt";
            DialogResult dr = sf.ShowDialog();
            if (dr == DialogResult.OK)
            {
                TextWriter tr = new StreamWriter(sf.FileName);
                tr.Write(textBox1.Text);
                tr.Close();
            }
        }

        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (textBox1.Text != "")
            {
                DialogResult dr = MessageBox.Show("Do you want to save?", "Confirmation", MessageBoxButtons.OKCancel);
                if (dr == DialogResult.OK)
                {
                    SaveFileDialog sf = new SaveFileDialog();
                    sf.Title = "Save a Text FIle";
                    sf.Filter = "Text Documents (*.txt)|*.txt";
                    DialogResult drr = sf.ShowDialog();
                    if (drr == DialogResult.OK)
                    {
                        TextWriter tr = new StreamWriter(sf.FileName);
                        tr.Write(textBox1.Text);
                        tr.Close();
                    }
                    textBox1.Text = "";
                }
                if (dr == DialogResult.Cancel)
                {
                    textBox1.Text = "";
                }
            }
        }

        private void cutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(textBox1.SelectedText);
            textBox1.SelectedText = "";
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(textBox1.SelectedText);
        }

        private void pasteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string str = Clipboard.GetText();
            textBox1.Text = textBox1.Text.Insert(textBox1.SelectionStart, str);
        }

        private void selectAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            textBox1.SelectAll();
        }

        private void exitToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            DialogResult dr = MessageBox.Show("Do you want to exit ?", "Confirmation", MessageBoxButtons.OKCancel);
            if (dr == DialogResult.OK)
            {
                this.Close();
            }

        }

        private void printToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PrintDialog printDialog = new PrintDialog();
            printDialog.Document = printDocument;
            if (printDialog.ShowDialog() == DialogResult.OK)
            {
                printDocument.Print();
            }
        }

        private void printDocument_PrintPage(object sender, PrintPageEventArgs e)
        {
            e.Graphics.DrawString(textBox1.Text, new Font("Arial", 16), Brushes.Black, new PointF(10, 10));
        }
    }
}

Output

 
 
 



Powershell =>  /Program.cs
windows forms app (.net framework)
data science tick

view tool box
view solution explorer
label
textbox
button

alt enter
text  name
textbox (Design)name=> tb



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {

        }
    }
}

ctrl k c
ctrl k u



-----------------------------------------------------------------------------------------------------



calc


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace calculator
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
       

        private void button10_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "0";
            }
            else
            {
                tb1.Text = tb1.Text + "0";
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void btn1_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "1";
            }
            else
            {
                tb1.Text = tb1.Text + "1";
            }
        }

        private void btnclear_Click(object sender, EventArgs e)
        {

        }

        private void btn2_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "2" && tb1.Text != null)
            {
                tb1.Text = "2";
            }
            else
            {
                tb1.Text = tb1.Text + "2";
            }
        }

        private void btn3_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "3";
            }
            else
            {
                tb1.Text = tb1.Text + "3";
            }
        }

        private void btn4_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "4";
            }
            else
            {
                tb1.Text = tb1.Text + "4";
            }
        }

        private void btn5_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "5";
            }
            else
            {
                tb1.Text = tb1.Text + "5";
            }
        }

        private void btn6_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "6";
            }
            else
            {
                tb1.Text = tb1.Text + "6";
            }
        }

        private void btn7_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "7";
            }
            else
            {
                tb1.Text = tb1.Text + "7";
            }
        }

        private void btn8_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "8";
            }
            else
            {
                tb1.Text = tb1.Text + "8";
            }
        }

        private void btn9_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "9";
            }
            else
            {
                tb1.Text = tb1.Text + "9";
            }
        }

        private void btnequal_Click(object sender, EventArgs e)
        {

        }

        private void btnplus_Click(object sender, EventArgs e)
        {
           
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "+";
            }
            else
            {
                tb1.Text = tb1.Text + "+";
            }
        }

        private void btnminus_Click(object sender, EventArgs e)
        {

        }

        private void btnstar_Click(object sender, EventArgs e)
        {

        }

        private void btnslash_Click(object sender, EventArgs e)
        {

        }
    }
}





Console App(.NET Framework)	c# Windows Console
View => Solution Explorer
View => Toolbox
take objects and change the text and name from properties => ALT+enter for properties
button code:
label2.Text = "Welcome"+tb1.Text;
label.Visible=true;

for Message=> MessageBox.Show("Welcome"+tb1.Text)


Database=>
right click on project=> Data=> Service-based database=> rename=> Add
click mdf file=> server explorer=> Tables => Add New Table
right click on id => properties=> (Is Identity)=> true
Insert the data columns => Update table
Dont forget to rename on T-SQL Script
Right click on table => Show Table Data

Right click on mdf => properties=> Copy the connection string
Dont forget to import 
using System.Data;
using System.Data.SqlClient;

If any error
Project=> Manage NuGet Packages=> Install 
Systen.Data.SqlClient


For insertion=>

 private void btn_Click(object sender, EventArgs e)
 {
     string query;
     string constring = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\calculator\\Student_Details.mdf;Integrated Security=True";
     SqlConnection con = new SqlConnection(constring);
     con.Open();
     query = "insert into Student(Name,Enrollment,Email,Address,Mobile)values(@Name,@Enrollment,@Email,@Address,@Mobile)";
     SqlCommand cmd = new SqlCommand(query,con);
     cmd.Parameters.AddWithValue("@Name",tb1.Text);
     cmd.Parameters.AddWithValue("@Enrollment", tb2.Text);
     cmd.Parameters.AddWithValue("@Email", tb3.Text);
     cmd.Parameters.AddWithValue("@Address", tb4.Text);
     cmd.Parameters.AddWithValue("@Mobile",Convert.ToInt32(tb5.Text));
     cmd.ExecuteNonQuery();
     con.Close();
     MessageBox.Show("Registered Successfully!!!😊");
 }

-------------------------------------------------------------

For Deletion=>

  private void Delete_Click(object sender, EventArgs e)
  {
      string query;
      string constring = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=C:\\Users\\i\\source\\repos\\calculator\\Student_Details.mdf;Integrated Security=True";
      SqlConnection con = new SqlConnection(constring);
      con.Open();
      query = "delete from Student where Name=@Name";
      SqlCommand cmd = new SqlCommand(query, con);
      cmd.Parameters.AddWithValue("@Name", tb1.Text);
      cmd.ExecuteNonQuery();
      con.Close();
      MessageBox.Show("Deleted Successfully!!!😒");
  }

-----------------------------------------------------------------------------------

For Update=>


Shortcut=>

--------------------------------------------------------------------------------------------------------------------------
Insert=>

string query;

string con="";
SqlConnection con = new SqlConnection(con);
con.Open();

query="Insert intro table(col1,col2) values(@val1,@val2)";
SqlCommand cmd = new SqlCommand(query,con);
cmd.Parameters.AddWithValue("@val1",tb1.Text);
cmd.ExecuteQuery();
con.Close();

MessageBox.Show("Registered Succesfully");

-------------------------------------------------------------------------------------------------------------------

Delete=>

string query;

string con="";
SqlConnection con = new SqlConnection(con);
con.Open();

query = "delete from student where Name = @Name";
SqlCommand cmd = new SqlCommand(query,con);
cmd.Parameters.AddWithValue("@Name",tb1.Text);
cmd.ExecuteQuery();

con.Close();
MeassageBox


--------------------------------------------------------------------------------------------------------------------------

MenuStrip=> 

Form2.cs=>

 private void Form2_Load(object sender, EventArgs e)
 {
     IsMdiContainer = true;
 }
 private void addStudentToolStripMenuItem_Click(object sender, EventArgs e)
 {
     AddStudent A = new AddStudent();
     A.Show();
     A.MdiParent = this;
 }

 private void deleteStudentToolStripMenuItem_Click(object sender, EventArgs e)
 {
     DeleteStudent D = new DeleteStudent();
     D.Show();
     D.MdiParent = this;
 }

 private void searchStudentToolStripMenuItem_Click(object sender, EventArgs e)
 {
     SearchStudent S = new SearchStudent();
     S.Show();
     S.MdiParent = this;
 }


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Calc

int first_no;
int second_no;
string op="";

 if (tb1.Text == "0" && tb1.Text != null)
 {
     tb1.Text = "1";
 }
 else
 {
     tb1.Text = tb1.Text + "1";
 }
-------------------
tb1.Clear();
---------------------
  if (tb1.Text == "0" && tb1.Text != null)
  {
      tb1.Text = "2";
  }
  else
  {
      tb1.Text = tb1.Text + "2";
  }

btnequal

 private void btnequal_Click(object sender, EventArgs e)
 {
     second_no = Convert.ToInt16(tb1.Text);
     int result;

     switch (op)
     {
         case "+":
             result = first_no + second_no;
             tb1.Text = result.ToString();
             break;
         case "-":
             result = first_no - second_no;
             tb1.Text = result.ToString();
             break;
         case "*":
             result = first_no * second_no;
             tb1.Text = result.ToString();
             break;
         case "/":
             if (second_no != 0)
             {
                 result = first_no / second_no;
                 tb1.Text = result.ToString();
             }
             else
             {
                 tb1.Text = "Error";
             }
             break;
     }
 }

  private void btnplus_Click(object sender, EventArgs e)
  {
      first_no = Convert.ToInt32(tb1.Text);
      tb1.Text = "0";
      op = "+";
  }

  private void btnminus_Click(object sender, EventArgs e)
  {
      first_no = Convert.ToInt32(tb1.Text);
      tb1.Text = "0";
      op = "-";
  }

  private void btnstar_Click(object sender, EventArgs e)
  {
      first_no = Convert.ToInt32(tb1.Text);
      tb1.Text = "0";
      op = "*";
  }

  private void btnslash_Click(object sender, EventArgs e)
  {
      first_no = Convert.ToInt32(tb1.Text);
      tb1.Text = "0";
      op = "/";
  }



----------------------------------------------------------------------------------------------------------------------------------------



Full code=>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace calculator
{
    public partial class Form1 : Form
    {
        int first_no;
        int second_no;
        string op="";

        public Form1()
        {
            InitializeComponent();
        }

        private void button10_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "0";
            }
            else
            {
                tb1.Text = tb1.Text + "0";
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void btn1_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "1";
            }
            else
            {
                tb1.Text = tb1.Text + "1";
            }
        }

        private void btnclear_Click(object sender, EventArgs e)
        {
            tb1.Clear();
        }

        private void btn2_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "2";
            }
            else
            {
                tb1.Text = tb1.Text + "2";
            }
        }

        private void btn3_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "3";
            }
            else
            {
                tb1.Text = tb1.Text + "3";
            }
        }

        private void btn4_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "4";
            }
            else
            {
                tb1.Text = tb1.Text + "4";
            }
        }

        private void btn5_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "5";
            }
            else
            {
                tb1.Text = tb1.Text + "5";
            }
        }

        private void btn6_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "6";
            }
            else
            {
                tb1.Text = tb1.Text + "6";
            }
        }

        private void btn7_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "7";
            }
            else
            {
                tb1.Text = tb1.Text + "7";
            }
        }

        private void btn8_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "8";
            }
            else
            {
                tb1.Text = tb1.Text + "8";
            }
        }

        private void btn9_Click(object sender, EventArgs e)
        {
            if (tb1.Text == "0" && tb1.Text != null)
            {
                tb1.Text = "9";
            }
            else
            {
                tb1.Text = tb1.Text + "9";
            }
        }

        private void btnequal_Click(object sender, EventArgs e)
        {
            second_no = Convert.ToInt16(tb1.Text);
            int result;

            switch (op)
            {
                case "+":
                    result = first_no + second_no;
                    tb1.Text = result.ToString();
                    break;
                case "-":
                    result = first_no - second_no;
                    tb1.Text = result.ToString();
                    break;
                case "*":
                    result = first_no * second_no;
                    tb1.Text = result.ToString();
                    break;
                case "/":
                    if (second_no != 0)
                    {
                        result = first_no / second_no;
                        tb1.Text = result.ToString();
                    }
                    else
                    {
                        tb1.Text = "Error";
                    }
                    break;
            }
        }

        private void btnplus_Click(object sender, EventArgs e)
        {
            first_no = Convert.ToInt32(tb1.Text);
            tb1.Text = "0";
            op = "+";
        }

        private void btnminus_Click(object sender, EventArgs e)
        {
            first_no = Convert.ToInt32(tb1.Text);
            tb1.Text = "0";
            op = "-";
        }

        private void btnstar_Click(object sender, EventArgs e)
        {
            first_no = Convert.ToInt32(tb1.Text);
            tb1.Text = "0";
            op = "*";
        }

        private void btnslash_Click(object sender, EventArgs e)
        {
            first_no = Convert.ToInt32(tb1.Text);
            tb1.Text = "0";
            op = "/";
        }

        private void tb1_TextChanged(object sender, EventArgs e)
        {

        }
    }
}

















-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ListView;
using System.Net;
using System.Reflection;

namespace Student_Management_System
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string query;
            string gender, choice;
            string connection = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=\"C:\\Users\\i\\source\\repos\\Student Management System\\StudentManagement.mdf\";Integrated Security=True";
            SqlConnection con = new SqlConnection(connection);
            con.Open();
            query = "insert into StudentManagement(Name, Branch, Semester, City, Gender, Choice)values(@Name, @Branch, @Semester, @City, @Gender, @Choice)";
            SqlCommand cmd = new SqlCommand(query, con);
            cmd.Parameters.AddWithValue("@Name", textBox1.Text);
            cmd.Parameters.AddWithValue("@Branch", textBox2.Text);
            cmd.Parameters.AddWithValue("@Semester", Convert.ToInt32(textBox3.Text));
            cmd.Parameters.AddWithValue("@City", comboBox1.SelectedItem.ToString());


            if (radioButton1.Checked)
            {
                gender = "Male";
            }
            else
            {
                gender = "Female";
            }
            cmd.Parameters.AddWithValue("@Gender", gender);

            List<string> choices = new List<string>();
            if (checkBox1.Checked)
            {
                choices.Add("ASP.NET");
            }
            if (checkBox2.Checked)
            {
                choices.Add("C#");
            }
            choice = string.Join(", ", choices);
            cmd.Parameters.AddWithValue("@Choice", choice);


            cmd.ExecuteNonQuery();
            con.Close();
            MessageBox.Show("Registered Successfully!!! ");
        }

        private void button2_Click(object sender, EventArgs e)
        {
            string query;
            string gender, choice;
            string connection = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=\"C:\\Users\\i\\source\\repos\\Student Management System\\StudentManagement.mdf\";Integrated Security=True";
            SqlConnection con = new SqlConnection(connection);
            con.Open();

            if (radioButton1.Checked)
            {
                gender = "Male";
            }
            else
            {
                gender = "Female";
            }

            List<string> choices = new List<string>();
            if (checkBox1.Checked)
            {
                choices.Add("ASP.NET");
            }
            if (checkBox2.Checked)
            {
                choices.Add("C#");
            }
            choice = string.Join(", ", choices); // Correctly convert list to string

            query = "update StudentManagement set Name='" + textBox1.Text + "', Branch='" + textBox2.Text + "', Semester='" + Convert.ToInt32(textBox3.Text) + "', City='" + comboBox1.SelectedItem.ToString() + "', Gender='" + gender + "', Choice='" + choice + "' where id='" + textBox4.Text + "'";
            SqlCommand cmd = new SqlCommand(query, con);

            cmd.ExecuteNonQuery();
            con.Close();
            MessageBox.Show("Updated Successfully!!! ");
        }

        private void button3_Click(object sender, EventArgs e)
        {
            string query;
            string gender, choice;
            string connection = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=\"C:\\Users\\i\\source\\repos\\Student Management System\\StudentManagement.mdf\";Integrated Security=True";
            SqlConnection con = new SqlConnection(connection);
            con.Open();
            query = "Delete from StudentManagement where ID='" + textBox4.Text + "'";
            SqlCommand cmd = new SqlCommand(query, con);

            cmd.ExecuteNonQuery();
            con.Close();
            MessageBox.Show("Deleted Successfully!!! ");
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            string query;
            string gender, choice;
            string connection = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=\"C:\\Users\\i\\source\\repos\\Student Management System\\StudentManagement.mdf\";Integrated Security=True";
            using (SqlConnection con = new SqlConnection(connection))
            {
                con.Open();
                query = "SELECT * FROM StudentManagement";
                SqlDataAdapter dataAdapter = new SqlDataAdapter(query, con);
                DataTable dataTable = new DataTable();
                dataAdapter.Fill(dataTable);
                dataGridView1.DataSource = dataTable;
            }
        }
    }
}






CURD Operations - TaskList

Code:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Collections;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using System.Net;
using System.Reflection;

namespace Student_Management_System
{
    public partial class STURECORD : Form
    {
        string query;
        SqlConnection con = new SqlConnection("Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=\"C:\\Users\\vagha\\source\\repos\\Student Management System\\Student Management System\\sturecord.mdf\";Integrated Security=True");
        public STURECORD()
        {
            InitializeComponent();
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            con.Open();
            query = "INSERT INTO data (NAME, BRANCH, SEM,CITY,GENDER,CHOICE)VALUES(@NAME, @BRANCH, @SEM, @CITY, @GENDER,@CHOICE)";
            SqlCommand cmd = new SqlCommand(query, con);
            //int id;
            //int.TryParse(textBox4.Text, out id);
            //cmd.Parameters.AddWithValue("@ID",id);
            cmd.Parameters.AddWithValue("@NAME", textBox1.Text);
            cmd.Parameters.AddWithValue("@BRANCH", textBox2.Text);
            int sem;
            int.TryParse(textBox3.Text, out sem);
            cmd.Parameters.AddWithValue("@SEM", sem);
            cmd.Parameters.AddWithValue("@CITY", comboBox1.SelectedItem.ToString());

            string gender, choice;
            if (radioButton1.Checked)
            {
                gender = "Male";
            }
            else
            {
                gender = "Female";
            }
            cmd.Parameters.AddWithValue("@Gender", gender);

            List<string> choices = new List<string>();
            if (checkBox1.Checked)
            {
                choices.Add("ASP.NET");
            }
            if (checkBox2.Checked)
            {
                choices.Add("C#");
            }
            choice = string.Join(", ", choices);
            cmd.Parameters.AddWithValue("@CHOICE", choice);

            cmd.ExecuteNonQuery();
            con.Close();
            MessageBox.Show("Registered Successfully!!! ");
        }

        private void STURECORD_Load(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            con.Open();
            string gender, choice;
            if (radioButton1.Checked)
            {
                gender = "Male";
            }
            else
            {
                gender = "Female";
            }

            List<string> choices = new List<string>();
            if (checkBox1.Checked)
            {
                choices.Add("ASP.NET");
            }
            if (checkBox2.Checked)
            {
                choices.Add("C#");
            }
            choice = string.Join(", ", choices);
            query = "update data set NAME='" + textBox1.Text + "',BRANCH ='" + textBox2.Text + "',SEM = '" + textBox3.Text + "',CITY='" + comboBox1.SelectedItem.ToString() + "',GENDER = '" + gender + "',CHOICE='" + choice + "' where ID='" + textBox4.Text + "'";
            SqlCommand cmd = new SqlCommand(query, con);

            cmd.ExecuteNonQuery();
            con.Close();
            MessageBox.Show("Update Successfully!!! ");
        }

        private void button3_Click(object sender, EventArgs e)
        {
            con.Open();
            query = "Delete from data where ID='" + textBox4.Text + "'";
            SqlCommand cmd = new SqlCommand(query, con);

            cmd.ExecuteNonQuery();
            con.Close();
            MessageBox.Show("Dalete Successfully!!! ");
        }
    }
}

Output:

 


 




